<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>游戏协议 on workwiki</title>
    <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/</link>
    <description>Recent content in 游戏协议 on workwiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>崇仁打盾</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E6%89%93%E7%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E6%89%93%E7%9B%BE/</guid>
      <description>打独流程 sequenceDiagram 服务器-&gt;&gt;玩家一:提示打独|hinttAlone 服务器-&gt;&gt;玩家二:提示打独|hinttAlone 服务器-&gt;&gt;玩家三:提示打独|hinttAlone 服务器-&gt;&gt;玩家四:提示打独|hinttAlone 玩家三--&gt;&gt;服务器:打独|askAlone 服务器-&gt;&gt;玩家三:提示等待|waitAlone 玩家二--&gt;&gt;服务器:不打独|askAlone 服务器-&gt;&gt;玩家二:提示等待|waitAlone 玩家一--&gt;&gt;服务器:不打独|askAlone 服务器-&gt;&gt;玩家一:提示等待|waitAlone 玩家四--&gt;&gt;服务器:打独|askAlone 服务器-&gt;&gt;玩家一:广播玩家三打独|useAlone 服务器-&gt;&gt;玩家二:广播玩家三打独|useAlone 服务器-&gt;&gt;玩家三:广播玩家三打独|useAlone 服务器-&gt;&gt;玩家四:广播玩家三打独|useAlone 出牌流程 目录结构 代码目录: game_9800
子目录:
client:测试客户端 config:参数配置 event:protobuf自动产生,建议不要手工编辑 flow:实现游戏逻辑 enginer.go: 洗牌算法 game_flow.go:实现流程图的GameFlow game_room.go:实现流程图的GameRoom game_record.go:实现流程图的GameRecord game_round.go:实现流程图的GameRound status.go:定义打盾专有给客户端错误代码 util_test.go:是单元测试文件 proto:protobuf协议定义,用于打盾和客户app通讯,实现打盾专有的协议 robot:测试机器人 web:测试环境web界面,展示房间列表,手工加机器人等 子文件:
.gitignore:git代码管理忽略文件 build:供jenkins自动调用,编译脚本 game_9800_dev.conf:是开发环境配置文件 game_9800_test.conf:是测试环境配置文件 game_9800_opt.conf:是正式环境配置文件 main.go:程序入口文件 run:正式环境自动调用,运行脚本 README.md:git代码管理说明文件 git代码管理:dev分支
错误码 从9800到9899
错误码 描述 9801 success 9802 数据反序化失败 9803 地区玩法错误 9804 未知事件 9805 没有该用户 9806 用户未登录 9807 用户验证失败 9808 用户重复登录 9809 已加入其他游戏 9810 已登陆其他服务器 9812 加入房间失败 9813 房间不存在 9814 房间已经满人 9815 用户已在房间中 9816 该用户没有在任何房间 9820 重复申请解散 9821 房间不在解散中 9822 获取距离失败 9823 退出房间失败 9824 房间不在准备中 9827 重复解散投票 9828 用户不在当前房间 9829 房间已开始游戏 9830 坐下失败,游戏币不足 9831 没有空房间 9832 重复准备 9833 用户已在其他设备登陆 9834 用户信息读取失败 9835 准备失败,游戏币不足 9836 创建VIP房间失败,游戏币不足 9837 VIP房间, 加入失败 9838 加入VIP房间失败, 密码错误 9839 非VIP房间 9840 无权打独 9841 房间不在选择打独中 9845 房间不在游戏中 9846 无权不出 9847 不出token错误 9848 必须出牌 9849 出牌token错误 9850 出牌不符合规则 9851 无权出牌 9852 你没有处于托管中 9853 数据库操作失败 9854 取消托管的次数已经用光 9855 你处于托管中 事件定义 从9800到9899 事件流向：</description>
    </item>
    
    <item>
      <title>崇仁麻将</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86/</guid>
      <description>错误码 错误码 描述 9545 房间不在游戏中 9546 无权不出 9547 不出token错误 9548 必须出牌 9549 出牌token错误 9550 出牌错误 9551 无权出牌 9552 操作被取消 事件定义 从9500到9599 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9501 登录 c-&amp;gt;s 进入游戏要进行登录验证 9502 服务器返回 s-&amp;gt;c 服务器通用返回 9503 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9504 房间列表 c-&amp;gt;s 房间列表 9505 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9506 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9507 房间信息 c-&amp;gt;s 房间信息 9508 准备 c-&amp;gt;s 准备 9509 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9510 游戏信息 s-&amp;gt;c 游戏信息 9511 申请解散 c-&amp;gt;s 申请解散 9512 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9513 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9514 解散房间的结果 s-&amp;gt;c 解散房间的结果 9515 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9516 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9517 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9518 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9519 请求历史积分 c-&amp;gt;s 请求历史积分 9520 历史积分回包 s-&amp;gt;c 历史积分回包 9521 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9522 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9423 游戏信息 s-&amp;gt;c 刷新游戏信息 9531 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9532 系统发牌 s-&amp;gt;c 系统发牌 9533 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9534 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9535 请求出牌 c-&amp;gt;s 请求出牌 9536 广播出牌结果 s-&amp;gt;c 广播出牌结果 9537 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9538 摊牌 s-&amp;gt;c 摊牌 9539 小局结算 s-&amp;gt;c 小局结算 9540 回放游戏信息 s-&amp;gt;c 回放游戏信息 9555 回放 c-&amp;gt;s 回放,客户端要求 9559 创建VIP房间 c-&amp;gt;s 创建VIP房间 9560 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9501 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9502 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9503 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9504 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9505 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9506 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9507 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9508 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9509 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9510 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3 [packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5 [packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9511 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9512 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9513 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9514 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9515 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9516 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9517 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9518 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9519 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9520 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9521 //提示内容 string alertStr = 1; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9523 } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9522 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9531 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9532 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9533 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9534 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9535 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9536 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9537 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9538 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9539 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 14 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 13 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 14 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 15 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 16; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 17; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 18; // 系统的派牌 int32 addPai = 19; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9540 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9555 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9559 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9560 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>崇仁麻将二人场</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</guid>
      <description>错误码 错误码 描述 9445 房间不在游戏中 9446 无权不出 9447 不出token错误 9448 必须出牌 9449 出牌token错误 9450 出牌错误 9451 无权出牌 9452 操作被取消 事件定义 从9400到9499 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9401 登录 c-&amp;gt;s 进入游戏要进行登录验证 9402 服务器返回 s-&amp;gt;c 服务器通用返回 9403 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9404 房间列表 c-&amp;gt;s 房间列表 9405 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9406 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9407 房间信息 c-&amp;gt;s 房间信息 9408 准备 c-&amp;gt;s 准备 9409 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9410 游戏信息 s-&amp;gt;c 游戏信息 9411 申请解散 c-&amp;gt;s 申请解散 9412 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9413 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9414 解散房间的结果 s-&amp;gt;c 解散房间的结果 9415 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9416 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9417 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9418 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9419 请求历史积分 c-&amp;gt;s 请求历史积分 9420 历史积分回包 s-&amp;gt;c 历史积分回包 9421 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9422 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9423 游戏信息 s-&amp;gt;c 刷新游戏信息 9431 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9432 系统发牌 s-&amp;gt;c 系统发牌 9433 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9434 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9435 请求出牌 c-&amp;gt;s 请求出牌 9436 广播出牌结果 s-&amp;gt;c 广播出牌结果 9437 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9438 摊牌 s-&amp;gt;c 摊牌 9439 小局结算 s-&amp;gt;c 小局结算 9440 回放游戏信息 s-&amp;gt;c 回放游戏信息 9455 回放 c-&amp;gt;s 回放,客户端要求 9459 创建VIP房间 c-&amp;gt;s 创建VIP房间 9460 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9401 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9402 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9403 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9404 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9405 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9406 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9407 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9408 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9409 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9410 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3 [packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5 [packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9411 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9412 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9413 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9414 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9415 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9416 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9417 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9418 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9419 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9420 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9421 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9422 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9423 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9431 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9432 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9433 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9434 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9435 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9436 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9437 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9438 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9439 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 14 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 13 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 14 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 15 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 16; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 17; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 18; // 系统的派牌 int32 addPai = 19; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9440 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9455 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9459 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9460 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>斗地主</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E6%96%97%E5%9C%B0%E4%B8%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E6%96%97%E5%9C%B0%E4%B8%BB/</guid>
      <description>错误码 从8800到8889
错误码 描述 8801 success 8802 数据反序化失败 8803 地区玩法错误 8804 未知事件 8805 没有该用户 8806 用户未登录 8807 用户验证失败 8808 用户重复登录 8809 已加入其他游戏 8810 已登陆其他服务器 8812 加入房间失败 8813 房间不存在 8814 房间已经满人 8815 用户已在房间中 8816 该用户没有在任何房间 8820 重复申请解散 8821 房间不在解散中 8822 获取距离失败 8823 退出房间失败 8824 房间不在准备中 8827 重复解散投票 8828 用户不在当前房间 8829 房间已开始游戏 8830 坐下失败,游戏币不足 8831 没有空房间 8832 重复准备 8833 用户已在其他设备登陆 8834 用户信息读取失败 8835 准备失败,游戏币不足 8836 创建VIP房间失败,游戏币不足 8837 VIP房间, 加入失败 8838 加入VIP房间失败, 密码错误 8839 非VIP房间 8840 无权抢地主 8841 房间不在选择抢地主中 8845 房间不在游戏中 8846 无权不出 8847 不出token错误 8848 必须出牌 8849 出牌token错误 8850 出牌不符合规则 8851 无权出牌 8852 你没有处于托管中 8853 数据库操作失败 8854 取消托管的次数已经用光 8855 你处于托管中 8862 房间不在选择明牌中 8863 房间不在选择加倍中 8864 房间不在选择反加倍中 8865 无权明牌 8866 无权加倍 8867 无权反加倍 事件定义 从8800到8899 事件流向：</description>
    </item>
    
    <item>
      <title>公共错误码</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E9%94%99%E8%AF%AF%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E9%94%99%E8%AF%AF%E7%A0%81/</guid>
      <description> 错误码 描述 01 success 02 数据反序化失败 03 地区玩法错误 04 未知事件 05 没有该用户 06 用户未登录 07 用户验证失败 08 用户重复登录 09 已加入其他游戏 10 已登陆其他服务器 12 加入房间失败 13 房间不存在 14 房间已经满人 15 用户已在房间中 16 该用户没有在任何房间 20 重复申请解散 27 重复解散投票 21 房间不在解散中 22 获取距离失败 23 退出房间失败 24 房间不在准备中 28 用户不在当前房间 29 房间已开始游戏 30 坐下失败,游戏币不足 31 没有空房间 32 重复准备 33 用户已在其他设备登陆 34 用户信息读取失败 35 准备失败,游戏币不足 36 创建VIP房间失败,游戏币不足 37 VIP房间, 加入失败 38 加入VIP房间失败, 密码错误 45 房间不在游戏中 52 取消托管失败 53 数据库操作失败 54 你处于托管中 39 非VIP房间 70 未开启定位不允许进房间 71 近距离不允许进房间 </description>
    </item>
    
    <item>
      <title>公共服</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E6%9C%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E6%9C%8D/</guid>
      <description>错误码 9100~9199 公共服
错误码 描述 9100 success 9101 参数错误 9102 数据库错误 9103 数据反序化失败 9104 游戏玩法ID错误 9105 未知事件 9106 服务器错误 9107 用户未登录 9108 用户重复登录 9109 已在其他设备登录 9110 验证码失效 9111 验证码错误 9112 验证码次数超限 9113 验证码发送失败 9114 短信发送失败 9115 手机号码错误 9116 短信发送成功 9120 用户已存在 9121 用户验证失败 9122 用户不存在 9123 帐号被禁用 9141 数据长度超限 9143 无场次信息 9144 不能发送给自己 9145 用户信息错误 9146 手机号码格式不对 9147 请求第三方服务失败 9148 微信支付失败 9149 不允许微信h5支付 9150 不允许微信APP支付 9151 地区ID不存在 9152 用户已经设置地区ID 9153 不允许支付宝H5支付 9154 房间不存在 9155 房间已开始游戏 9156 该用户没有在任何房间 事件定义 从9100到9199 事件流向：</description>
    </item>
    
    <item>
      <title>公共协议</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E5%8D%8F%E8%AE%AE/</guid>
      <description>事件定义 从 00到 99 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端
事件编号 事件名称 事件流向 描述 备注 01 登录 c-&amp;gt;s 进入游戏要进行登录验证 02 服务器返回 s-&amp;gt;c 服务器通用返回 03 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 04 房间列表 c-&amp;gt;s 房间列表 05 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 06 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 07 房间信息 c-&amp;gt;s 房间信息 08 准备 c-&amp;gt;s 准备 09 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 10 游戏信息 s-&amp;gt;c 游戏信息 11 申请解散 c-&amp;gt;s 申请解散 12 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 13 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 14 解散房间的结果 s-&amp;gt;c 解散房间的结果 15 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 16 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 17 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 18 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 19 请求历史积分 c-&amp;gt;s 请求历史积分 20 历史积分回包 s-&amp;gt;c 历史积分回包 21 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 22 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 23 游戏信息 s-&amp;gt;c 刷新游戏信息 56 广播用户进入托管 s-&amp;gt;c 广播用户进入托管 57 取消托管 c-&amp;gt;s 用户取消托管 58 取消托管成功 s-&amp;gt;c 广播用户取消托管成功 </description>
    </item>
    
    <item>
      <title>红中麻将</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86/</guid>
      <description>错误码 错误码 描述 9945 房间不在游戏中 9946 无权不出 9947 不出token错误 9948 必须出牌 9949 出牌token错误 9950 出牌错误 9951 无权出牌 事件定义 从9900到9999 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9901 登录 c-&amp;gt;s 进入游戏要进行登录验证 9902 服务器返回 s-&amp;gt;c 服务器通用返回 9903 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9904 房间列表 c-&amp;gt;s 房间列表 9905 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9906 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9907 房间信息 c-&amp;gt;s 房间信息 9908 准备 c-&amp;gt;s 准备 9909 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9910 游戏信息 s-&amp;gt;c 游戏信息 9911 申请解散 c-&amp;gt;s 申请解散 9912 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9913 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9914 解散房间的结果 s-&amp;gt;c 解散房间的结果 9915 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9916 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9917 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9918 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9919 请求历史积分 c-&amp;gt;s 请求历史积分 9920 历史积分回包 s-&amp;gt;c 历史积分回包 9921 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9922 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9923 游戏信息 s-&amp;gt;c 刷新游戏信息 9931 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9932 系统发牌 s-&amp;gt;c 系统发牌 9933 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9934 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9935 请求出牌 c-&amp;gt;s 请求出牌 9936 广播出牌结果 s-&amp;gt;c 广播出牌结果 9937 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9938 摊牌 s-&amp;gt;c 摊牌 9939 小局结算 s-&amp;gt;c 小局结算 9940 回放游戏信息 s-&amp;gt;c 回放游戏信息 9955 回放 c-&amp;gt;s 回放,客户端要求 9959 创建VIP房间 c-&amp;gt;s 创建VIP房间 9960 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9901 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9902 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9903 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9904 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9905 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9906 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9907 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9908 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9909 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9910 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9911 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9912 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9913 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9914 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9915 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9916 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9917 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9918 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9919 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9920 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9921 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9922 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9923 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9931 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9932 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9933 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9934 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9935 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9936 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9937 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9938 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9939 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14[packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15[packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌,则不包括最后胡的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9940 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9955 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9959 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9960 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>红中麻将二人场</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</guid>
      <description>错误码 错误码 描述 9645 房间不在游戏中 9646 无权不出 9647 不出token错误 9648 必须出牌 9649 出牌token错误 9650 出牌错误 9651 无权出牌 9652 操作被取消 事件定义 从9600到9699 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9601 登录 c-&amp;gt;s 进入游戏要进行登录验证 9602 服务器返回 s-&amp;gt;c 服务器通用返回 9603 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9604 房间列表 c-&amp;gt;s 房间列表 9605 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9606 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9607 房间信息 c-&amp;gt;s 房间信息 9608 准备 c-&amp;gt;s 准备 9609 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9610 游戏信息 s-&amp;gt;c 游戏信息 9611 申请解散 c-&amp;gt;s 申请解散 9612 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9613 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9614 解散房间的结果 s-&amp;gt;c 解散房间的结果 9615 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9616 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9617 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9618 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9619 请求历史积分 c-&amp;gt;s 请求历史积分 9620 历史积分回包 s-&amp;gt;c 历史积分回包 9621 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9622 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9623 游戏信息 s-&amp;gt;c 刷新游戏信息 9631 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9632 系统发牌 s-&amp;gt;c 系统发牌 9633 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9634 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9635 请求出牌 c-&amp;gt;s 请求出牌 9636 广播出牌结果 s-&amp;gt;c 广播出牌结果 9637 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9638 摊牌 s-&amp;gt;c 摊牌 9639 小局结算 s-&amp;gt;c 小局结算 9640 回放游戏信息 s-&amp;gt;c 回放游戏信息 9655 回放 c-&amp;gt;s 回放,客户端要求 9659 创建VIP房间 c-&amp;gt;s 创建VIP房间 9660 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9601 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9602 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9603 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9604 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9605 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9606 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9607 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9608 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9609 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9610 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9611 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9612 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9613 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9614 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9615 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9616 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9617 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9618 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9619 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9620 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9621 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9622 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9623 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9631 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9632 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9633 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9634 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9635 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9636 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9637 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9638 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9639 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14[packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15[packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌,则不包括最后胡的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9640 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9655 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9659 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9660 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>乐安麻将</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86/</guid>
      <description>错误码 错误码 描述 9245 房间不在游戏中 9246 无权不出 9247 不出token错误 9248 必须出牌 9249 出牌token错误 9250 出牌错误 9251 无权出牌 9252 操作被取消 事件定义 从9200到9299 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端
事件编号 事件名称 事件流向 描述 备注 9201 登录 c-&amp;gt;s 进入游戏要进行登录验证 9202 服务器返回 s-&amp;gt;c 服务器通用返回 9203 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9204 房间列表 c-&amp;gt;s 房间列表 9205 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9206 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9207 房间信息 c-&amp;gt;s 房间信息 9208 准备 c-&amp;gt;s 准备 9209 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9210 游戏信息 s-&amp;gt;c 游戏信息 9211 申请解散 c-&amp;gt;s 申请解散 9212 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9213 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9214 解散房间的结果 s-&amp;gt;c 解散房间的结果 9215 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9216 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9217 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9218 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9219 请求历史积分 c-&amp;gt;s 请求历史积分 9220 历史积分回包 s-&amp;gt;c 历史积分回包 9221 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9222 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9223 游戏信息 s-&amp;gt;c 刷新游戏信息 9231 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9232 系统发牌 s-&amp;gt;c 系统发牌 9233 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9234 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9235 请求出牌 c-&amp;gt;s 请求出牌 9236 广播出牌结果 s-&amp;gt;c 广播出牌结果 9237 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9238 摊牌 s-&amp;gt;c 摊牌 9239 小局结算 s-&amp;gt;c 小局结算 9240 回放游戏信息 s-&amp;gt;c 回放游戏信息 9255 回放 c-&amp;gt;s 回放,客户端要求 9259 创建VIP房间 c-&amp;gt;s 创建VIP房间 9260 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9201 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9202 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9203 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9204 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9205 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9206 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9207 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9208 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9209 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9210 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9211 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9212 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9213 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9214 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9215 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9216 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9217 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9218 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9219 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9220 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9221 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9222 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9223 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9231 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9232 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9233 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9234 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9235 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9236 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9237 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9238 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9239 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9240 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9255 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9259 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9260 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>乐安麻将二人场</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</guid>
      <description>错误码 错误码 描述 9045 房间不在游戏中 9046 无权不出 9047 不出token错误 9048 必须出牌 9049 出牌token错误 9050 出牌错误 9051 无权出牌 9052 操作被取消 事件定义 从9000到9099 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9001 登录 c-&amp;gt;s 进入游戏要进行登录验证 9002 服务器返回 s-&amp;gt;c 服务器通用返回 9003 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 9004 房间列表 c-&amp;gt;s 房间列表 9005 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9006 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9007 房间信息 c-&amp;gt;s 房间信息 9008 准备 c-&amp;gt;s 准备 9009 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 9010 游戏信息 s-&amp;gt;c 游戏信息 9011 申请解散 c-&amp;gt;s 申请解散 9012 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 9013 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 9014 解散房间的结果 s-&amp;gt;c 解散房间的结果 9015 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 9016 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 9017 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 9018 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 9019 请求历史积分 c-&amp;gt;s 请求历史积分 9020 历史积分回包 s-&amp;gt;c 历史积分回包 9021 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 9022 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9023 游戏信息 s-&amp;gt;c 刷新游戏信息 9031 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 9032 系统发牌 s-&amp;gt;c 系统发牌 9033 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 9034 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 9035 请求出牌 c-&amp;gt;s 请求出牌 9036 广播出牌结果 s-&amp;gt;c 广播出牌结果 9037 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9038 摊牌 s-&amp;gt;c 摊牌 9039 小局结算 s-&amp;gt;c 小局结算 9040 回放游戏信息 s-&amp;gt;c 回放游戏信息 9055 回放 c-&amp;gt;s 回放,客户端要求 9059 创建VIP房间 c-&amp;gt;s 创建VIP房间 9060 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 9001 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 9002 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9003 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 9004 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 9005 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 9006 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 9007 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 9008 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9009 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9010 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9011 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 9012 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9013 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 9014 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9015 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9016 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9017 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 9018 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9019 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9020 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9021 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9022 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9023 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9031 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9032 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9033 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9034 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 9035 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9036 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9037 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 9038 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9039 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9040 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9055 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 9059 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 9060 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>麻将番型表</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/mahjong-mask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/mahjong-mask/</guid>
      <description>JSON格式
番型 说明 3 平胡 4 碰碰胡 5 假字一色 6 真字一色 7 假清一色 8 真清一色 9 七对 10 十三烂 11 七星十三烂 12 碰碰胡清一色 13 碰碰胡字一色 14 七对清一色 15 七对字一色 16 四归一七对 17 八归一七对 18 十二归一七对 19 四归一平胡 20 八归一平胡 21 十二归一平胡 22 四归一假清一色 23 四归一真清一色 24 八归一假清一色 25 八归一真清一色 26 十二归一假清一色 27 十二归一真清一色 28 四归一假字一色 29 四归一真字一色 30 八归一假字一色 31 八归一真字一色 32 十二归一假字一色 33 十二归一真字一色 34 四归一七对清一色 35 八归一七对清一色 36 十二归一七对清一色 37 四归一七对字一色 38 八归一七对字一色 39 十二归一七对字一色 40 4红中 </description>
    </item>
    
    <item>
      <title>跑得快</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E8%B7%91%E5%BE%97%E5%BF%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E8%B7%91%E5%BE%97%E5%BF%AB/</guid>
      <description>错误码 从8900到8999
错误码 描述 8901 success 8902 数据反序化失败 8903 地区玩法错误 8904 未知事件 8905 没有该用户 8906 用户未登录 8907 用户验证失败 8908 用户重复登录 8909 已加入其他游戏 8910 已登陆其他服务器 8912 加入房间失败 8913 房间不存在 8914 房间已经满人 8915 用户已在房间中 8916 该用户没有在任何房间 8920 重复申请解散 8921 房间不在解散中 8922 获取距离失败 8923 退出房间失败 8924 房间不在准备中 8927 重复解散投票 8928 用户不在当前房间 8929 房间已开始游戏 8930 坐下失败,游戏币不足 8931 没有空房间 8932 重复准备 8933 用户已在其他设备登陆 8934 用户信息读取失败 8935 准备失败,游戏币不足 8936 创建VIP房间失败,游戏币不足 8937 VIP房间, 加入失败 8938 加入VIP房间失败, 密码错误 8939 非VIP房间 8940 无权包庄 8941 房间不在选择包庄中 8945 房间不在游戏中 8946 无权不出 8947 不出token错误 8948 必须出牌 8949 出牌token错误 8950 出牌不符合规则 8951 无权出牌 8952 你没有处于托管中 8953 数据库操作失败 8954 取消托管的次数已经用光 8955 你处于托管中 8961 包庄游戏币数最低为当前底分60倍 事件定义 从8900到8999 事件流向：</description>
    </item>
    
    <item>
      <title>扑克掩码表</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/poker-mask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/poker-mask/</guid>
      <description>JSON格式
掩码 说明 0 单张3 1 单张4 2 单张5 3 单张6 4 单张7 5 单张8 6 单张9 7 单张10 8 单张J 9 单张Q 10 单张K 11 单张A 12 单张2 13 单张小王 14 单张大王 15 一对3 16 一对4 17 一对5 18 一对6 19 一对7 20 一对8 21 一对9 22 一对10 23 一对J 24 一对Q 25 一对K 26 一对A 27 一对2 28 一对小王 29 一对大王 30 三张3 31 三张4 32 三张5 33 三张6 34 三张7 35 三张8 36 三张9 37 三张10 38 三张J 39 三张Q 40 三张K 41 三张A 42 三张2 43 三张3带1 44 三张4带1 45 三张5带1 46 三张6带1 47 三张7带1 48 三张8带1 49 三张9带1 50 三张10带1 51 三张J带1 52 三张Q带1 53 三张K带1 54 三张A带1 55 三张2带1 56 三张3带2 57 三张4带2 58 三张5带2 59 三张6带2 60 三张7带2 61 三张8带2 62 三张9带2 63 三张10带2 64 三张J带2 65 三张Q带2 66 三张K带2 67 三张A带2 68 三张2带2 69 3-4飞机 70 4-5飞机 71 5-6飞机 72 6-7飞机 73 7-8飞机 74 8-9飞机 75 9-10飞机 76 10-J飞机 77 J-Q飞机 78 Q-K飞机 79 K-A飞机 80 3-5飞机 81 4-6飞机 82 5-7飞机 83 6-8飞机 84 7-9飞机 85 8-10飞机 86 9-J飞机 87 10-Q飞机 88 J-K飞机 89 Q-A飞机 90 3-6飞机 91 4-7飞机 92 5-8飞机 93 6-9飞机 94 7-10飞机 95 8-J飞机 96 9-Q飞机 97 10-K飞机 98 J-A飞机 99 3-7飞机 100 4-8飞机 101 5-9飞机 102 6-10飞机 103 7-J飞机 104 8-Q飞机 105 9-K飞机 106 10-A飞机 107 3-8飞机 108 4-9飞机 109 5-10飞机 110 6-J飞机 111 7-Q飞机 112 8-K飞机 113 9-A飞机 114 3-7顺子 115 4-8顺子 116 5-9顺子 117 6-10顺子 118 7-J顺子 119 8-Q顺子 120 9-K顺子 121 10-A顺子 122 3-8顺子 123 4-9顺子 124 5-10顺子 125 6-J顺子 126 7-Q顺子 127 8-K顺子 128 9-A顺子 129 3-9顺子 130 4-10顺子 131 5-J顺子 132 6-Q顺子 133 7-K顺子 134 8-A顺子 135 3-10顺子 136 4-J顺子 137 5-Q顺子 138 6-K顺子 139 7-A顺子 140 3-J顺子 141 4-Q顺子 142 5-K顺子 143 6-A顺子 144 3-Q顺子 145 4-K顺子 146 5-A顺子 147 3-K顺子 148 4-A顺子 149 3-A顺子 150 3-4连对 151 4-5连对 152 5-6连对 153 6-7连对 154 7-8连对 155 8-9连对 156 9-10连对 157 10-J连对 158 J-Q连对 159 Q-K连对 160 K-A连对 161 3-5连对 162 4-6连对 163 5-7连对 164 6-8连对 165 7-9连对 166 8-10连对 167 9-J连对 168 10-Q连对 169 J-K连对 170 Q-A连对 171 3-6连对 172 4-7连对 173 5-8连对 174 6-9连对 175 7-10连对 176 8-J连对 177 9-Q连对 178 10-K连对 179 J-A连对 180 3-7连对 181 4-8连对 182 5-9连对 183 6-10连对 184 7-J连对 185 8-Q连对 186 9-K连对 187 10-A连对 188 3-8连对 189 4-9连对 190 5-10连对 191 6-J连对 192 7-Q连对 193 8-K连对 194 9-A连对 195 3-9连对 196 4-10连对 197 5-J连对 198 6-Q连对 199 7-K连对 200 8-A连对 201 3-10连对 202 4-J连对 203 5-Q连对 204 6-K连对 205 7-A连对 206 3-J连对 207 4-Q连对 208 5-K连对 209 6-A连对 210 3-Q连对 211 4-K连对 212 5-A连对 213 3-K连对 214 4-A连对 215 3-A连对 216 副510k 217 方块正510k 218 梅花正510k 219 红桃正510k 220 黑桃正510k 221 3个510k 222 4个510k 223 4张3 224 4张4 225 4张5 226 4张6 227 4张7 228 4张8 229 4张9 230 4张10 231 4张J 232 4张Q 233 4张K 234 4张A 235 4张2 236 5张3 237 5张4 238 5张5 239 5张6 240 5张7 241 5张8 242 5张9 243 5张10 244 5张J 245 5张Q 246 5张K 247 5张A 248 5张2 249 6张3 250 6张4 251 6张5 252 6张6 253 6张7 254 6张8 255 6张9 256 6张10 257 6张J 258 6张Q 259 6张K 260 6张A 261 6张2 262 7张3 263 7张4 264 7张5 265 7张6 266 7张7 267 7张8 268 7张9 269 7张10 270 7张J 271 7张Q 272 7张K 273 7张A 274 7张2 275 8张3 276 8张4 277 8张5 278 8张6 279 8张7 280 8张8 281 8张9 282 8张10 283 8张J 284 8张Q 285 8张K 286 8张A 287 8张2 288 3张王 289 4张王 290 3-4无翼飞机 291 4-5无翼飞机 292 5-6无翼飞机 293 6-7无翼飞机 294 7-8无翼飞机 295 8-9无翼飞机 296 9-10无翼飞机 297 10-J无翼飞机 298 J-Q无翼飞机 299 Q-K无翼飞机 300 K-A无翼飞机 301 3-5无翼飞机 302 4-6无翼飞机 303 5-7无翼飞机 304 6-8无翼飞机 305 7-9无翼飞机 306 8-10无翼飞机 307 9-J无翼飞机 308 10-Q无翼飞机 309 J-K无翼飞机 310 Q-A无翼飞机 311 3-6无翼飞机 312 4-7无翼飞机 313 5-8无翼飞机 314 6-9无翼飞机 315 7-10无翼飞机 316 8-J无翼飞机 317 9-Q无翼飞机 318 10-K无翼飞机 319 J-A无翼飞机 320 3-7无翼飞机 321 4-8无翼飞机 322 5-9无翼飞机 323 6-10无翼飞机 324 7-J无翼飞机 325 8-Q无翼飞机 326 9-K无翼飞机 327 10-A无翼飞机 328 3-8无翼飞机 329 4-9无翼飞机 330 5-10无翼飞机 331 6-J无翼飞机 332 7-Q无翼飞机 333 8-K无翼飞机 334 9-A无翼飞机 335 3-9无翼飞机 336 4-10无翼飞机 337 5-J无翼飞机 338 6-Q无翼飞机 339 7-K无翼飞机 340 8-A无翼飞机 341 3-10无翼飞机 342 4-J无翼飞机 343 5-Q无翼飞机 344 6-K无翼飞机 345 7-A无翼飞机 346 3-J无翼飞机 347 4-Q无翼飞机 348 5-K无翼飞机 349 6-A无翼飞机 350 3-Q无翼飞机 351 4-K无翼飞机 352 5-A无翼飞机 353 3-K无翼飞机 354 4-A无翼飞机 355 3-A无翼飞机 356 9张3 357 9张4 358 9张5 359 9张6 360 9张7 361 9张8 362 9张9 363 9张10 364 9张J 365 9张Q 366 9张K 367 9张A 368 9张2 369 10张3 370 10张4 371 10张5 372 10张6 373 10张7 374 10张8 375 10张9 376 10张10 377 10张J 378 10张Q 379 10张K 380 10张A 381 10张2 382 11张3 383 11张4 384 11张5 385 11张6 386 11张7 387 11张8 388 11张9 389 11张10 390 11张J 391 11张Q 392 11张K 393 11张A 394 11张2 395 12张3 396 12张4 397 12张5 398 12张6 399 12张7 400 12张8 401 12张9 402 12张10 403 12张J 404 12张Q 405 12张K 406 12张A 407 12张2 408 13张3 409 13张4 410 13张5 411 13张6 412 13张7 413 13张8 414 13张9 415 13张10 416 13张J 417 13张Q 418 13张K 419 13张A 420 13张2 421 14张3 422 14张4 423 14张5 424 14张6 425 14张7 426 14张8 427 14张9 428 14张10 429 14张J 430 14张Q 431 14张K 432 14张A 433 14张2 434 15张3 435 15张4 436 15张5 437 15张6 438 15张7 439 15张8 440 15张9 441 15张10 442 15张J 443 15张Q 444 15张K 445 15张A 446 15张2 447 16张3 448 16张4 449 16张5 450 16张6 451 16张7 452 16张8 453 16张9 454 16张10 455 16张J 456 16张Q 457 16张K 458 16张A 459 16张2 460 17张3 461 17张4 462 17张5 463 17张6 464 17张7 465 17张8 466 17张9 467 17张10 468 17张J 469 17张Q 470 17张K 471 17张A 472 17张2 473 18张3 474 18张4 475 18张5 476 18张6 477 18张7 478 18张8 479 18张9 480 18张10 481 18张J 482 18张Q 483 18张K 484 18张A 485 18张2 486 19张3 487 19张4 488 19张5 489 19张6 490 19张7 491 19张8 492 19张9 493 19张10 494 19张J 495 19张Q 496 19张K 497 19张A 498 19张2 499 20张3 500 20张4 501 20张5 502 20张6 503 20张7 504 20张8 505 20张9 506 20张10 507 20张J 508 20张Q 509 20张K 510 20张A 511 20张2 600 5个510k 601 6个510k 602 7个510k 603 8个510k 650 一对红心5 660 火箭 670 3张3带1对 671 3张4带1对 672 3张5带1对 673 3张6带1对 674 3张7带1对 675 3张8带1对 676 3张9带1对 677 3张10带1对 678 3张J带1对 679 3张Q带1对 680 3张K带1对 681 3张A带1对 682 3张2带1对 690 4张3带2 691 4张4带2 692 4张5带2 693 4张6带2 694 4张7带2 695 4张8带2 696 4张9带2 697 4张10带2 698 4张J带2 699 4张Q带2 700 4张K带2 701 4张A带2 702 4张2带2 710 3-4单飞飞机 711 4-5单飞飞机 712 5-6单飞飞机 713 6-7单飞飞机 714 7-8单飞飞机 715 8-9单飞飞机 716 9-10单飞飞机 717 10-J单飞飞机 718 J-Q单飞飞机 719 Q-K单飞飞机 720 K-A单飞飞机 721 3-5单飞飞机 722 4-6单飞飞机 723 5-7单飞飞机 724 6-8单飞飞机 725 7-9单飞飞机 726 8-10单飞飞机 727 9-J单飞飞机 728 10-Q单飞飞机 729 J-K单飞飞机 730 Q-A单飞飞机 731 3-6单飞飞机 732 4-7单飞飞机 733 5-8单飞飞机 734 6-9单飞飞机 735 7-10单飞飞机 736 8-J单飞飞机 737 9-Q单飞飞机 738 10-K单飞飞机 739 J-A单飞飞机 740 3-7单飞飞机 741 4-8单飞飞机 742 5-9单飞飞机 743 6-10单飞飞机 744 7-J单飞飞机 745 8-Q单飞飞机 746 9-K单飞飞机 747 10-A单飞飞机 748 3-8单飞飞机 749 4-9单飞飞机 750 5-10单飞飞机 751 6-J单飞飞机 752 7-Q单飞飞机 753 8-K单飞飞机 754 9-A单飞飞机 760 4张3带1 761 4张4带1 762 4张5带1 763 4张6带1 764 4张7带1 765 4张8带1 766 4张9带1 767 4张10带1 768 4张J带1 769 4张Q带1 770 4张K带1 771 4张A带1 772 4张2带1 773 4张3带1对 774 4张4带1对 775 4张5带1对 776 4张6带1对 777 4张7带1对 778 4张8带1对 779 4张9带1对 780 4张10带1对 781 4张J带1对 782 4张Q带1对 783 4张K带1对 784 4张A带1对 785 4张2带1对 786 4张3带2对 787 4张4带2对 788 4张5带2对 789 4张6带2对 790 4张7带2对 791 4张8带2对 792 4张9带2对 793 4张10带2对 794 4张J带2对 795 4张Q带2对 796 4张K带2对 797 4张A带2对 798 4张2带2对 800 3-4飞机带对 801 4-5飞机带对 802 5-6飞机带对 803 6-7飞机带对 804 7-8飞机带对 805 8-9飞机带对 806 9-10飞机带对 807 10-J飞机带对 808 J-Q飞机带对 809 Q-K飞机带对 810 K-A飞机带对 811 3-5飞机带对 812 4-6飞机带对 813 5-7飞机带对 814 6-8飞机带对 815 7-9飞机带对 816 8-10飞机带对 817 9-J飞机带对 818 10-Q飞机带对 819 J-K飞机带对 820 Q-A飞机带对 821 3-6飞机带对 822 4-7飞机带对 823 5-8飞机带对 824 6-9飞机带对 825 7-10飞机带对 826 8-J飞机带对 827 9-Q飞机带对 828 10-K飞机带对 829 J-A飞机带对 830 3-7飞机带对 831 4-8飞机带对 832 5-9飞机带对 833 6-10飞机带对 834 7-J飞机带对 835 8-Q飞机带对 836 9-K飞机带对 837 10-A飞机带对 840 3-8飞机带对 841 4-9飞机带对 842 5-10飞机带对 843 6-J飞机带对 844 7-Q飞机带对 845 8-K飞机带对 846 9-A飞机带对 850 方块K五花牛 851 梅花K五花牛 852 红桃K五花牛 853 黑桃K五花牛 860 4张3带3 861 4张4带3 862 4张5带3 863 4张6带3 864 4张7带3 865 4张8带3 866 4张9带3 867 4张10带3 868 4张J带3 869 4张Q带3 870 4张K带3 871 4张A带3 872 4张2带3 900 A炸弹牛 901 2炸弹牛 902 3炸弹牛 903 4炸弹牛 904 5炸弹牛 905 6炸弹牛 906 7炸弹牛 907 8炸弹牛 908 9炸弹牛 909 10炸弹牛 910 J炸弹牛 911 Q炸弹牛 912 K炸弹牛 920 A顺子牛 921 2顺子牛 922 3顺子牛 923 4顺子牛 924 5顺子牛 925 6顺子牛 926 7顺子牛 927 8顺子牛 928 9顺子牛 929 10顺子牛 930 J顺子牛 931 Q顺子牛 932 K顺子牛 940 单张红心5 950 大小王 </description>
    </item>
    
    <item>
      <title>宜黄红心5</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E7%BA%A2%E5%BF%835/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E7%BA%A2%E5%BF%835/</guid>
      <description>错误码 从10000到10099
错误码 描述 10001 success 10002 数据反序化失败 10003 地区玩法错误 10004 未知事件 10005 没有该用户 10006 用户未登录 10007 用户验证失败 10008 用户重复登录 10009 已加入其他游戏 10010 已登陆其他服务器 10012 加入房间失败 10013 房间不存在 10014 房间已经满人 10015 用户已在房间中 10016 该用户没有在任何房间 10020 重复申请解散 10021 房间不在解散中 10022 获取距离失败 10023 退出房间失败 10024 房间不在准备中 10027 重复解散投票 10028 用户不在当前房间 10029 房间已开始游戏 10030 坐下失败,游戏币不足 10031 没有空房间 10032 重复准备 10033 用户已在其他设备登陆 10034 用户信息读取失败 10035 准备失败,游戏币不足 10036 创建VIP房间失败,游戏币不足 10037 VIP房间, 加入失败 10038 加入VIP房间失败, 密码错误 10039 非VIP房间 10040 无权包牌 10041 房间不在选择包牌中 10045 房间不在游戏中 10046 无权不出 10047 不出token错误 10048 必须出牌 10049 出牌token错误 10050 出牌不符合规则 10051 无权出牌 10052 你没有处于托管中 10053 数据库操作失败 10054 取消托管的次数已经用光 10055 你处于托管中 事件定义 从10000到10099 事件流向：</description>
    </item>
    
    <item>
      <title>宜黄麻将</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86/</guid>
      <description>错误码 错误码 描述 10245 房间不在游戏中 10246 无权不出 10247 不出token错误 10248 必须出牌 10249 出牌token错误 10250 出牌错误 10251 无权出牌 10252 操作被取消 事件定义 从10200到10299 事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 10201 登录 c-&amp;gt;s 进入游戏要进行登录验证 10202 服务器返回 s-&amp;gt;c 服务器通用返回 10203 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 10204 房间列表 c-&amp;gt;s 房间列表 10205 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 10206 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 10207 房间信息 c-&amp;gt;s 房间信息 10208 准备 c-&amp;gt;s 准备 10209 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 10210 游戏信息 s-&amp;gt;c 游戏信息 10211 申请解散 c-&amp;gt;s 申请解散 10212 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 10213 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 10214 解散房间的结果 s-&amp;gt;c 解散房间的结果 10215 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 10216 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 10217 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 10218 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 10219 请求历史积分 c-&amp;gt;s 请求历史积分 10220 历史积分回包 s-&amp;gt;c 历史积分回包 10221 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 10222 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 10223 游戏信息 s-&amp;gt;c 刷新游戏信息 10231 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 10232 系统发牌 s-&amp;gt;c 系统发牌 10233 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 10234 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 10235 请求出牌 c-&amp;gt;s 请求出牌 10236 广播出牌结果 s-&amp;gt;c 广播出牌结果 10237 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 10238 摊牌 s-&amp;gt;c 摊牌 10239 小局结算 s-&amp;gt;c 小局结算 10240 回放游戏信息 s-&amp;gt;c 回放游戏信息 10255 回放 c-&amp;gt;s 回放,客户端要求 10259 创建VIP房间 c-&amp;gt;s 创建VIP房间 10260 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 10201 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 10202 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 10203 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 10204 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 10205 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 10206 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 10207 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 10208 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 10209 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 10210 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 10211 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 10212 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 10213 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 10214 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 10215 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 10216 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 10217 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 10218 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 10219 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 10220 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 10221 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 10222 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 10223 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 10231 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 10232 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 10233 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 10234 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 10235 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 10236 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 10237 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 10238 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 10239 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 10240 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 10255 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 10259 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 10260 string pwd = 2; } </description>
    </item>
    
    <item>
      <title>宜黄麻将二人场</title>
      <link>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/</guid>
      <description>错误码 错误码 描述 10145 房间不在游戏中 10146 无权不出 10147 不出token错误 10148 必须出牌 10149 出牌token错误 10150 出牌错误 10151 无权出牌 10152 操作被取消 事件定义 从10100到10199
事件流向：
c-&amp;gt;s 客户端发送到服务器端 s-&amp;gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 10101 登录 c-&amp;gt;s 进入游戏要进行登录验证 10102 服务器返回 s-&amp;gt;c 服务器通用返回 10103 心跳包 c-&amp;gt;s 客户端每5秒向服务端发起心跳包 10104 房间列表 c-&amp;gt;s 房间列表 10105 大厅内有房间变化 s-&amp;gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 10106 加入房间 c-&amp;gt;s 房间ID,不填房间号,就是系统选房间即快速开始 10107 房间信息 c-&amp;gt;s 房间信息 10108 准备 c-&amp;gt;s 准备 10109 广播房间变化 s-&amp;gt;c 房间内有玩家变化,广播给房间内玩家 10110 游戏信息 s-&amp;gt;c 游戏信息 10111 申请解散 c-&amp;gt;s 申请解散 10112 提示玩家投票及广播解散意见 s-&amp;gt;c 提示玩家投票及广播解散意见 10113 玩家是否同意解散 c-&amp;gt;s 玩家是否同意解散 10114 解散房间的结果 s-&amp;gt;c 解散房间的结果 10115 玩家间距离请求 c-&amp;gt;s 玩家间距离请求 10116 玩家间距离回包 s-&amp;gt;c 玩家间距离回包 10117 用户请求退出房间 c-&amp;gt;s 用户请求退出房间 10118 同个用户新登陆踢出旧登陆 s-&amp;gt;c 同个用户新登陆踢出旧登陆 10119 请求历史积分 c-&amp;gt;s 请求历史积分 10120 历史积分回包 s-&amp;gt;c 历史积分回包 10121 玩家间距离太近提示 s-&amp;gt;c 玩家间距离太近提示 10122 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 10123 游戏信息 s-&amp;gt;c 刷新游戏信息 10131 广播骰子结果 s-&amp;gt;c 广播骰子结果,暂时没有用到 10132 系统发牌 s-&amp;gt;c 系统发牌 10133 提示出牌 s-&amp;gt;c 提示出牌,发给可以出牌的玩家 10134 提示等待出牌 s-&amp;gt;c 提示等待出牌,发给等待别人出牌的玩家 10135 请求出牌 c-&amp;gt;s 请求出牌 10136 广播出牌结果 s-&amp;gt;c 广播出牌结果 10137 广播多个出牌结果 s-&amp;gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 10138 摊牌 s-&amp;gt;c 摊牌 10139 小局结算 s-&amp;gt;c 小局结算 10140 回放游戏信息 s-&amp;gt;c 回放游戏信息 10155 回放 c-&amp;gt;s 回放,客户端要求 10159 创建VIP房间 c-&amp;gt;s 创建VIP房间 10160 加入VIP房间 c-&amp;gt;s 加入VIP房间 登录 syntax = &amp;#34;proto3&amp;#34;; package event; message EventLogin { // IRequest 10101 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = &amp;#34;proto3&amp;#34;; package event; message EventReturn { // IResponse 10102 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = &amp;#34;proto3&amp;#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 10103 } 房间列表 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomList { // IResponse 10104 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; message EventUseRoomChange { // IResponse 10105 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinRoom { // IRequest 10106 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = &amp;#34;proto3&amp;#34;; package event; message EventRoomInfo { // IResponse 10107 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = &amp;#34;proto3&amp;#34;; package event; message EventAskReady { // IRequest 10108 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = &amp;#34;proto3&amp;#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 10109 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 10110 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 10111 } 提示玩家投票及广播解散意见 syntax = &amp;#34;proto3&amp;#34;; package event; message EventQueryDismassRoom { // IResponse 10112 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = &amp;#34;proto3&amp;#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 10113 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = &amp;#34;proto3&amp;#34;; package event; message EventNoticeDismassRoom { // IResponse 10114 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 10115 } 玩家间距离回包 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 10116 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = &amp;#34;proto3&amp;#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 10117 } 同个用户新登陆踢出旧登陆 syntax = &amp;#34;proto3&amp;#34;; package event; message EventKickOut { // IResponse 10118 //用户ID int32 userId = 1; } 请求历史积分 syntax = &amp;#34;proto3&amp;#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 10119 } 历史积分回包 syntax = &amp;#34;proto3&amp;#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 10120 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = &amp;#34;proto3&amp;#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 10121 //提示内容 string alertStr = 1; } 聊天 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 10122 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 10123 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 10131 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 10132 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 10133 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 10134 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = &amp;#34;proto3&amp;#34;; package event; message PBAskOut { // IRequest 10135 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 10136 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = &amp;#34;proto3&amp;#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 10137 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = &amp;#34;proto3&amp;#34;; package event; // 摊牌 message PBTanPai { // IResponse 10138 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = &amp;#34;proto3&amp;#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 10139 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = &amp;#34;proto3&amp;#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 10140 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = &amp;#34;proto3&amp;#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 10155 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventCreateVIPRoom { // IRequest 10159 } 加入VIP房间 syntax = &amp;#34;proto3&amp;#34;; package event; message EventJoinVIPRoom { // IRequest 10160 string pwd = 2; } </description>
    </item>
    
  </channel>
</rss>
