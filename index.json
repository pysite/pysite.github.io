[
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E6%89%93%E7%9B%BE/",
	"title": "崇仁打盾",
	"tags": [],
	"description": "",
	"content": "打独流程 sequenceDiagram 服务器-\u003e\u003e玩家一:提示打独|hinttAlone 服务器-\u003e\u003e玩家二:提示打独|hinttAlone 服务器-\u003e\u003e玩家三:提示打独|hinttAlone 服务器-\u003e\u003e玩家四:提示打独|hinttAlone 玩家三--\u003e\u003e服务器:打独|askAlone 服务器-\u003e\u003e玩家三:提示等待|waitAlone 玩家二--\u003e\u003e服务器:不打独|askAlone 服务器-\u003e\u003e玩家二:提示等待|waitAlone 玩家一--\u003e\u003e服务器:不打独|askAlone 服务器-\u003e\u003e玩家一:提示等待|waitAlone 玩家四--\u003e\u003e服务器:打独|askAlone 服务器-\u003e\u003e玩家一:广播玩家三打独|useAlone 服务器-\u003e\u003e玩家二:广播玩家三打独|useAlone 服务器-\u003e\u003e玩家三:广播玩家三打独|useAlone 服务器-\u003e\u003e玩家四:广播玩家三打独|useAlone 出牌流程 目录结构 代码目录: game_9800\n子目录:\nclient:测试客户端 config:参数配置 event:protobuf自动产生,建议不要手工编辑 flow:实现游戏逻辑 enginer.go: 洗牌算法 game_flow.go:实现流程图的GameFlow game_room.go:实现流程图的GameRoom game_record.go:实现流程图的GameRecord game_round.go:实现流程图的GameRound status.go:定义打盾专有给客户端错误代码 util_test.go:是单元测试文件 proto:protobuf协议定义,用于打盾和客户app通讯,实现打盾专有的协议 robot:测试机器人 web:测试环境web界面,展示房间列表,手工加机器人等 子文件:\n.gitignore:git代码管理忽略文件 build:供jenkins自动调用,编译脚本 game_9800_dev.conf:是开发环境配置文件 game_9800_test.conf:是测试环境配置文件 game_9800_opt.conf:是正式环境配置文件 main.go:程序入口文件 run:正式环境自动调用,运行脚本 README.md:git代码管理说明文件 git代码管理:dev分支\n错误码 从9800到9899\n错误码 描述 9801 success 9802 数据反序化失败 9803 地区玩法错误 9804 未知事件 9805 没有该用户 9806 用户未登录 9807 用户验证失败 9808 用户重复登录 9809 已加入其他游戏 9810 已登陆其他服务器 9812 加入房间失败 9813 房间不存在 9814 房间已经满人 9815 用户已在房间中 9816 该用户没有在任何房间 9820 重复申请解散 9821 房间不在解散中 9822 获取距离失败 9823 退出房间失败 9824 房间不在准备中 9827 重复解散投票 9828 用户不在当前房间 9829 房间已开始游戏 9830 坐下失败,游戏币不足 9831 没有空房间 9832 重复准备 9833 用户已在其他设备登陆 9834 用户信息读取失败 9835 准备失败,游戏币不足 9836 创建VIP房间失败,游戏币不足 9837 VIP房间, 加入失败 9838 加入VIP房间失败, 密码错误 9839 非VIP房间 9840 无权打独 9841 房间不在选择打独中 9845 房间不在游戏中 9846 无权不出 9847 不出token错误 9848 必须出牌 9849 出牌token错误 9850 出牌不符合规则 9851 无权出牌 9852 你没有处于托管中 9853 数据库操作失败 9854 取消托管的次数已经用光 9855 你处于托管中 事件定义 从9800到9899 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 s-\u0026gt;m 服务器端广播到客户端 事件编号 事件名称 事件流向 是否返回 描述 9801 登录 c-\u0026gt;s true 9802 服务器返回 s-\u0026gt;c 服务器返回,包括成功和异常 9803 心跳包 c-\u0026gt;s true 服务器回空包 9804 房间列表 s-\u0026gt;m 广播给大厅内但不在房间的玩家 9805 房间变化 s-\u0026gt;m 广播给大厅内但不在房间的玩家 9806 加入房间 c-\u0026gt;s true 快速开始-不用填房间号 9807 房间信息 s-\u0026gt;c 加入房间推送或在房间内掉线回来推送 9808 准备 c-\u0026gt;s 玩家准备及取消准备 9809 玩家变化 s-\u0026gt;m 加入,离开,上线,掉线,准备,取消准备都广播房间内玩家 9810 游戏信息 s-\u0026gt;c 开始游戏推送或游戏内掉线回来推送 9811 申请解散 c-\u0026gt;s 如果房间未开始,当作退出房间处理 9812 提示玩家投票 s-\u0026gt;m 广播给房间内玩家 9813 玩家投票 c-\u0026gt;s 玩家是否同意解散 9814 广播解散结果 s-\u0026gt;m 广播给房间内玩家 9815 请求LBS c-\u0026gt;s 9816 回复LBS s-\u0026gt;c 9817 请求退出房间 c-\u0026gt;s true 服务器返回 9818 顶号 s-\u0026gt;c 同个用户只能一个连接,新的顶替旧的 9819 请求历史积分 c-\u0026gt;s 9820 回复历史积分 s-\u0026gt;c 9821 近距离提示 m 9822 聊天 m 客户端和服务器广播同一个命令字/PB结构,服务器不做任何处理 9823 游戏信息 s-\u0026gt;c 刷新游戏信息 9831 系统发牌 s-\u0026gt;m 广播给房间内玩家,每个人信息不同 9832 提示打独 s-\u0026gt;m 让玩家选择是否打独 9833 玩家是否打独 c-\u0026gt;s 玩家是否打独,出错回包,成功不回 9834 广播是否打独 s-\u0026gt;m 通知打独 9835 广播亮牌 s-\u0026gt;m 通知找朋友牌 9836 提示出牌 s-\u0026gt;m 通知玩家出牌 9837 玩家出牌 c-\u0026gt;s 玩家出牌,出错时回包,成功不回 9838 广播出牌 s-\u0026gt;m 广播给房间内玩家,玩家出牌 9839 广播清桌 s-\u0026gt;m 广播给房间内玩家,通知清桌 9840 摊牌 s-\u0026gt;m 广播给房间内玩家 9841 小局结算 s-\u0026gt;m 广播给房间内玩家 9842 回放游戏信息 9855 回放 9856 广播用户进入托管模式 s-\u0026gt;m 9857 取消托管模式 c-\u0026gt;s true 9858 广播托管模式 s-\u0026gt;m 9859 创建VIP房间 c-\u0026gt;s true 9860 加入VIP房间 c-\u0026gt;s true 协议PB结构 玩家结构 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家信息 message EventPlayerInfo { //用户ID int32 userId = 1; //在线状态 true -- 在线 false -- 离线 bool onlineStatus = 2; //准备状态 true --准备 false --未准备 bool readyStatus = 3; //游戏币数(精确到分) int64 coins = 4; //座位ID 0，1，2，3 int32 seatId = 5; //昵称 string nickName = 6; //头像url string headUrl = 7; //用户IP string ip = 8; // 性别 0-没有设置,1--男 2--女 int32 sex = 9; //总积分 int32 totalJiFen = 10; //登录地址 string loginAddress = 11; } 创建VIP房间 message EventCreateVIPRoom { } 加入VIP房间 message EventJoinVIPRoom { int32 roomId = 1; string pwd = 2; } 广播托管模式 // 取消托管成功 message EventCancelEntrustDone { // IResponse 9858 // 取消托管用户座位号 int32 seat = 1; } 取消托管模式 // 取消托管 message EventCancelEntrust { // IRequest 9857 } 广播用户进入托管模式 // 广播用户进入托管 message EventInEntrust { // IRequest 9856 // 进入托管用户的座位号 int32 seat = 1; // 还有多少次可以取消托管 int32 count = 2; } 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn{ //事件ID int32 eventId = 1; //返回码-错误编码 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; //房间列表 message EventRoomList { // 房间列表 repeated EventRoomInfo items = 1[packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; // 大厅内有房间内变化,广播所有大厅里不在房间内玩家 message EventUseRoomChange { //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 快速开始-不用填房间号\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中,5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7[packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { //true-准备 false--取消准备 bool isReady = 1; } 玩家变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4[packed = false]; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9823 } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;use_out.proto\u0026#34;; import \u0026#34;assign_pai.proto\u0026#34;; message PBBombType { repeated int32 bts = 1[packed = false]; } message PBGameInfo { // IResponse 9810 // 是否打独 bool isAlone = 1; // 找朋友亮牌 int32 friendPai = 2; // 朋友关系是否出现 bool friendShow = 3; // 按座位号记录每个玩家对应朋友关系,朋友关系出现才有效 repeated int32 friendShip = 4[packed = false]; // 对家用户id,朋友关系出现才有效 int32 friendUserId = 5; // 叫牌者用户id int32 bankerUserId = 6; // 叫牌者座位id int32 bankerSeatId = 7; // 当前桌牌(按出牌顺序) repeated PBUseOut desktopPai = 8[packed = false]; // 当前桌牌分 int32 desktopScore = 9; // 当前手牌 repeated int32 handPai = 10[packed = false]; // 每个玩家抓分(座位号为下标) repeated int32 catchScore = 11[packed = false]; // 每个玩家炸弹输赢分(座位号为下标) repeated int32 bombScore = 12[packed = false]; // 能否出牌 bool canOutPai = 13; // 是否必须出牌 bool mustOutPai = 14; // 出牌token string outPaiToken = 15; // 当前出牌座位号 int32 curOutPaiSeat = 16; // 是否选择打独中 bool isChoiceAlone = 17; // 当前选择打独座位号 int32 choiceSeatId =18; // 每个玩家出完顺序(座位号为下标),0-没出完,1-头游,2-二游,3-三游,4-四游 repeated int32 overOrder = 19[packed = false]; // 每个玩家剩余张数(座位号为下标),小于等于5张才有效 repeated int32 restNum = 20[packed = false]; // 每个玩家炸弹赔率(座位号为下标) repeated int32 bombOdds = 21[packed = false]; // 选择打独中时，还剩余多少秒考虑时间 int32 remainAloneTime = 22; // 出牌时的剩余时间 int32 remainOutTime = 23; // 是否处于托管中 repeated bool isEntrust = 24[packed = false]; // 还有几次取消托管的机会 int32 cancelEntrustCount = 25; // 炸弹类型，按座位号 repeated PBBombType bombTypes = 26[packed = false]; // 打独时所有玩家的手牌 repeated PBAssignPai allPai = 27[packed = false]; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { } 提示玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家的投票情况 message EventPlayerVote { int32 userId = 1; string nickName = 2; //投票结果 0--未投票 1--同意 2--拒绝 int32 vote = 3; } // 提示玩家投票及广播解散意见,玩家如果没有投票,则提示投票,否则仅显示 message EventQueryDismassRoom { //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3[packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { //true--同意 false--拒绝 bool isAgree = 1; } 广播解散结果 syntax = \u0026#34;proto3\u0026#34;; package event; //解散房间的结果 message EventNoticeDismassRoom { //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 请求LBS syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { } 回复LBS syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseGeoItem { //起始用户ID int32 srcUid = 1; //结束用户ID int32 destUid = 2; //用户之间距离 string distance = 3; //用户之间距离,数值表示,单位(米) int32 gap = 4; } //玩家间距离回包 message EventUseGeo { // 用户ID列表 repeated int32 uids = 1[packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2[packed = false]; } 请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { } 顶号 syntax = \u0026#34;proto3\u0026#34;; package event; //同个用户新登陆踢出旧登陆 message EventKickOut { //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { } 回复历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; message EventHistoryScoreItem { // 用户ID int32 userId = 1; // 下标-局数,值-积分 repeated int32 scores = 2[packed = false]; } // 历史积分回包 message EventUseHistoryScore { repeated EventHistoryScoreItem items = 1[packed = false]; } 近距离提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAssignPai { // 系统开始发的手牌 repeated int32 pai = 1[packed = false]; } 提示打独 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintAlone { // 是否能选择打独 bool canAlone =1; // 当前叫牌者座位号 int32 seatId =2; // 当前叫牌者用户id int32 userId =3; // 剩余多少秒的考虑时间 int32 countdown = 4; } 玩家是否打独 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskAlone { // 是否打独 bool isAlone =1; } 广播是否打独 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;assign_pai.proto\u0026#34;; message PBUseAlone { // IResponse 9834 // 是否打独 bool isAlone = 1; // 当前叫牌者座位号 int32 seatId =2; // 当前叫牌者用户id int32 userId =3; // 所有玩家的手牌 repeated PBAssignPai allPai = 4[packed = false]; } 广播亮牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBUseFriend { // 庄家座位号 int32 seatId =1; // 庄家用户id int32 userId =2; // 找朋友的牌 int32 friendPai =3; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintOut { // 出牌token string token =1; // 当前出牌者座位号 int32 seatId =2; // 是否必须出牌 bool isForce = 3; // 倒计时 int32 countdown = 4; } 玩家出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut{ // 出牌token,处理重复出牌 string token=1; // 此次出的牌 repeated int32 pai = 2[packed = false]; // 是否不出 bool isSkip = 3; } 广播出牌 扑克牌型掩码文档\nsyntax = \u0026#34;proto3\u0026#34;; package event; message PBUseOut{ // 出牌玩家座位号 int32 seatId =1; // 出牌玩家用户id int32 userId =2; // 出的牌 repeated int32 pai = 3[packed = false]; // 是否包括找朋友牌,出牌者不是叫牌者 bool containFriendPai =4; // 包括此次出牌的桌面分 int32 desktopScore =5; // 牌分类,1-单张,2-对子,3-3张,4-3带1,5-3带2, 6-顺子,7-连对,8-飞机 // 9-510K,10-4炸,11-5炸,12-6炸,13-7炸,14-8炸,15-纯色双王 // 16-5炸(四红/四黑),17-6炸(四红/四黑),18-3个510K,19-4个510K // 20-三王,21-四王,22-5个510K,23-6个510K,24-7个510K,25-8个510K // 26--四炸(四红/四黑),27-(大小王) int32 paiClass = 6; // 牌掩码,例如单张3,3张3带2,见文档 http://wiki.dw7758.com/#!/game/poker/mask.md int32 paiMask = 7; // 出完位置,0-没出完,1-头游,2-二游,3-三游,4-四游 int32 overOrder = 8; // 按座位号记录每个玩家此次炸弹或纯色双王的输赢分,赢分为正数,输分为负数 repeated int32 bombScore = 9[packed = false]; // 第几轮 int32 roundIndex = 10; // 同一轮第几次 int32 roundSerial = 11; // 按座位号记录每个玩家对应朋友关系,必须出现找朋友牌才有效 repeated int32 friendShip = 12[packed = false]; // 是否不出 bool isSkip =13; // 炸弹或纯色双王的赔率 int32 bombOdds =14; // 剩余张数,小于等于5张才有效 int32 restNum =15; // 按座位号记录每个玩家到现在为止打出炸弹/纯色双王赔率(包括此次) repeated int32 sumBombOdds = 16[packed = false]; } 广播清桌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBClearDesktop{ // 大牌的玩家座位号 int32 seatId =1; // 大牌的玩家用户id int32 userId =2; // 此次大牌玩家赚的桌面分 int32 desktopScore =3; // 每个玩家抓桌面分(座位号为下标) repeated int32 catchScore = 4[packed = false]; // 第几轮 int32 roundIndex = 5; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; //用户的手牌 message PBTanPaiItem { //玩家ID int32 userId = 1; //玩家ID int32 seatId = 2; //手牌 repeated int32 normalPai = 3[packed = false]; } //摊牌 message PBTanPai { repeated PBTanPaiItem items = 1[packed = false]; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; message PBSmallMeta { //玩家ID int32 userId = 1; //玩家昵称 string nickName = 2; //当前总游戏币(精确到分) int64 totalCoins = 4; //此局输赢分(牌局结束输赢+炸弹),赢分为正数,输分为负数 int32 winScore = 5; //此局炸弹输赢分,赢分为正数,输分为负数 int32 bombScore = 6; //出完顺序,0-没出完,1-头游,2-二游,3,三游,4-四游 int32 overOrder = 7; //是否双围 bool isDouble = 8; //是否打独 bool isAlone = 9; //炸弹赔率 int32 bombOdds = 10; //是否庄家(此局第一个出牌人) bool isBanker = 11; //队友座位号(找朋友模式才有效) int32 friendSeatId = 12; //0-没有原炸,1-小原炸,2-大原炸 int32 fryState = 13; //捡分 int32 catchScore = 14; //牌局结束输赢分,赢分为正数,输分为负数 int32 cardScore = 15; //是否霸奖 bool isBully = 16; } message PBSmallSettlement { //房间号 int32 id = 1; //房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; //当前局数 int32 now = 3; //下局局数, 如果房间状态为：3， 这里为： int32 next = 4; //总局数 int32 total = 5; //玩法名称 string name = 6; //玩法描述 string doc = 7; //时间 string time = 8; //各玩家的情况,座位号为下标 repeated PBSmallMeta players = 9[packed = false]; //是否打独 bool isAlone = 10; //为true表示数据(是否打独,是否双围,是否庄家,队友座位号,出完顺序)有效,否则无效 bool dataValid = 11; //房间底分 int32 baseScore = 12; //结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 13; //结束文字说明 string overDoc = 14; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9842 // 是否打独 bool isAlone = 1; // 找朋友亮牌 int32 friendPai = 2; // 叫牌者用户id int32 bankerUserId = 3; // 叫牌者座位id int32 bankerSeatId = 4; // 系统发的手牌,按座位号为下标 repeated PBAssignPai handPai = 5[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; message PBReplayCell { //对应的事件ID int32 eventId = 1; //事件对应序列化后的proto内容 bytes eventData = 2; } //回放,客户端要求 message PBReplay { // IResponse 9855 repeated PBReplayCell cells = 1[packed = false]; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86/",
	"title": "崇仁麻将",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9545 房间不在游戏中 9546 无权不出 9547 不出token错误 9548 必须出牌 9549 出牌token错误 9550 出牌错误 9551 无权出牌 9552 操作被取消 事件定义 从9500到9599 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9501 登录 c-\u0026gt;s 进入游戏要进行登录验证 9502 服务器返回 s-\u0026gt;c 服务器通用返回 9503 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9504 房间列表 c-\u0026gt;s 房间列表 9505 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9506 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9507 房间信息 c-\u0026gt;s 房间信息 9508 准备 c-\u0026gt;s 准备 9509 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9510 游戏信息 s-\u0026gt;c 游戏信息 9511 申请解散 c-\u0026gt;s 申请解散 9512 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9513 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9514 解散房间的结果 s-\u0026gt;c 解散房间的结果 9515 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9516 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9517 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9518 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9519 请求历史积分 c-\u0026gt;s 请求历史积分 9520 历史积分回包 s-\u0026gt;c 历史积分回包 9521 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9522 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9423 游戏信息 s-\u0026gt;c 刷新游戏信息 9531 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9532 系统发牌 s-\u0026gt;c 系统发牌 9533 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9534 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9535 请求出牌 c-\u0026gt;s 请求出牌 9536 广播出牌结果 s-\u0026gt;c 广播出牌结果 9537 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9538 摊牌 s-\u0026gt;c 摊牌 9539 小局结算 s-\u0026gt;c 小局结算 9540 回放游戏信息 s-\u0026gt;c 回放游戏信息 9555 回放 c-\u0026gt;s 回放,客户端要求 9559 创建VIP房间 c-\u0026gt;s 创建VIP房间 9560 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9501 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9502 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9503 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9504 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9505 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9506 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9507 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9508 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9509 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9510 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3 [packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5 [packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9511 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9512 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9513 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9514 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9515 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9516 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9517 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9518 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9519 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9520 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9521 //提示内容 string alertStr = 1; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9523 } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9522 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9531 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9532 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9533 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9534 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9535 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9536 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9537 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9538 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9539 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 14 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 13 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 14 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 15 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 16; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 17; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 18; // 系统的派牌 int32 addPai = 19; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9540 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9555 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9559 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9560 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%B4%87%E4%BB%81%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/",
	"title": "崇仁麻将二人场",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9445 房间不在游戏中 9446 无权不出 9447 不出token错误 9448 必须出牌 9449 出牌token错误 9450 出牌错误 9451 无权出牌 9452 操作被取消 事件定义 从9400到9499 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9401 登录 c-\u0026gt;s 进入游戏要进行登录验证 9402 服务器返回 s-\u0026gt;c 服务器通用返回 9403 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9404 房间列表 c-\u0026gt;s 房间列表 9405 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9406 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9407 房间信息 c-\u0026gt;s 房间信息 9408 准备 c-\u0026gt;s 准备 9409 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9410 游戏信息 s-\u0026gt;c 游戏信息 9411 申请解散 c-\u0026gt;s 申请解散 9412 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9413 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9414 解散房间的结果 s-\u0026gt;c 解散房间的结果 9415 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9416 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9417 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9418 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9419 请求历史积分 c-\u0026gt;s 请求历史积分 9420 历史积分回包 s-\u0026gt;c 历史积分回包 9421 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9422 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9423 游戏信息 s-\u0026gt;c 刷新游戏信息 9431 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9432 系统发牌 s-\u0026gt;c 系统发牌 9433 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9434 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9435 请求出牌 c-\u0026gt;s 请求出牌 9436 广播出牌结果 s-\u0026gt;c 广播出牌结果 9437 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9438 摊牌 s-\u0026gt;c 摊牌 9439 小局结算 s-\u0026gt;c 小局结算 9440 回放游戏信息 s-\u0026gt;c 回放游戏信息 9455 回放 c-\u0026gt;s 回放,客户端要求 9459 创建VIP房间 c-\u0026gt;s 创建VIP房间 9460 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9401 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9402 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9403 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9404 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9405 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9406 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9407 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9408 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9409 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9410 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3 [packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5 [packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9411 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9412 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9413 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9414 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9415 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9416 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9417 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9418 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9419 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9420 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9421 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9422 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9423 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9431 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9432 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9433 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9434 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9435 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9436 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9437 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9438 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9439 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 14 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 13 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 14 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 15 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 16; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 17; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 18; // 系统的派牌 int32 addPai = 19; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9440 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9455 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9459 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9460 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E6%96%97%E5%9C%B0%E4%B8%BB/",
	"title": "斗地主",
	"tags": [],
	"description": "",
	"content": "错误码 从8800到8889\n错误码 描述 8801 success 8802 数据反序化失败 8803 地区玩法错误 8804 未知事件 8805 没有该用户 8806 用户未登录 8807 用户验证失败 8808 用户重复登录 8809 已加入其他游戏 8810 已登陆其他服务器 8812 加入房间失败 8813 房间不存在 8814 房间已经满人 8815 用户已在房间中 8816 该用户没有在任何房间 8820 重复申请解散 8821 房间不在解散中 8822 获取距离失败 8823 退出房间失败 8824 房间不在准备中 8827 重复解散投票 8828 用户不在当前房间 8829 房间已开始游戏 8830 坐下失败,游戏币不足 8831 没有空房间 8832 重复准备 8833 用户已在其他设备登陆 8834 用户信息读取失败 8835 准备失败,游戏币不足 8836 创建VIP房间失败,游戏币不足 8837 VIP房间, 加入失败 8838 加入VIP房间失败, 密码错误 8839 非VIP房间 8840 无权抢地主 8841 房间不在选择抢地主中 8845 房间不在游戏中 8846 无权不出 8847 不出token错误 8848 必须出牌 8849 出牌token错误 8850 出牌不符合规则 8851 无权出牌 8852 你没有处于托管中 8853 数据库操作失败 8854 取消托管的次数已经用光 8855 你处于托管中 8862 房间不在选择明牌中 8863 房间不在选择加倍中 8864 房间不在选择反加倍中 8865 无权明牌 8866 无权加倍 8867 无权反加倍 事件定义 从8800到8899 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 s-\u0026gt;m 服务器端广播到客户端 事件编号 事件名称 事件流向 是否返回 描述 8801 登录 c-\u0026gt;s true 8802 服务器返回 s-\u0026gt;c 服务器返回,包括成功和异常 8803 心跳包 c-\u0026gt;s true 服务器回空包 8804 房间列表 s-\u0026gt;m 广播给大厅内但不在房间的玩家 8805 房间变化 s-\u0026gt;m 广播给大厅内但不在房间的玩家 8806 加入房间 c-\u0026gt;s true 快速开始-不用填房间号 8807 房间信息 s-\u0026gt;c 加入房间推送或在房间内掉线回来推送 8808 准备 c-\u0026gt;s 玩家准备及取消准备 8809 玩家变化 s-\u0026gt;m 加入,离开,上线,掉线,准备,取消准备都广播房间内玩家 8810 游戏信息 s-\u0026gt;c 开始游戏推送或游戏内掉线回来推送 8811 申请解散 c-\u0026gt;s 如果房间未开始,当作退出房间处理 8812 提示玩家投票 s-\u0026gt;m 广播给房间内玩家 8813 玩家投票 c-\u0026gt;s 玩家是否同意解散 8814 广播解散结果 s-\u0026gt;m 广播给房间内玩家 8815 请求LBS c-\u0026gt;s 8816 回复LBS s-\u0026gt;c 8817 请求退出房间 c-\u0026gt;s true 服务器返回 8818 顶号 s-\u0026gt;c 同个用户只能一个连接,新的顶替旧的 8819 请求历史积分 c-\u0026gt;s 8820 回复历史积分 s-\u0026gt;c 8821 近距离提示 s-\u0026gt;m 8822 聊天 s-\u0026gt;m 客户端和服务器广播同一个命令字/PB结构,服务器不做任何处理 8823 游戏信息 s-\u0026gt;c 刷新游戏信息 8831 系统发牌 s-\u0026gt;m 广播给房间内玩家,每个人信息不同 8832 提示抢地主 s-\u0026gt;m 让玩家选择是否抢地主 8833 玩家是否抢地主 c-\u0026gt;s 玩家是否抢地主,出错回包,成功不回 8834 广播是否抢地主 s-\u0026gt;m 通知抢地主 8836 提示出牌 s-\u0026gt;m 通知玩家出牌 8837 玩家出牌 c-\u0026gt;s 玩家出牌,出错时回包,成功不回 8838 广播出牌 s-\u0026gt;m 广播给房间内玩家,玩家出牌 8839 广播清桌 s-\u0026gt;m 广播给房间内玩家,通知清桌 8840 摊牌 s-\u0026gt;m 广播给房间内玩家 8841 小局结算 s-\u0026gt;m 广播给房间内玩家 8842 回放游戏信息 8855 回放 8856 广播用户进入托管模式 s-\u0026gt;m 8857 取消托管模式 c-\u0026gt;s true 8858 广播托管模式 s-\u0026gt;m 8859 创建VIP房间 c-\u0026gt;s true 8860 加入VIP房间 c-\u0026gt;s true 8861 提示反加倍 s-\u0026gt;c 8862 回复反加倍 c-\u0026gt;s 8863 广播反加倍 s-\u0026gt;m 8864 广播底牌 s-\u0026gt;m 8865 提示明牌 s-\u0026gt;c 8866 回复明牌 c-\u0026gt;s 8867 广播明牌 s-\u0026gt;m 8868 提示加倍 s-\u0026gt;c 8869 回复加倍 c-\u0026gt;s 8870 广播加倍 s-\u0026gt;m 协议PB结构 玩家结构 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家信息 message EventPlayerInfo { //用户ID int32 userId = 1; //在线状态 true -- 在线 false -- 离线 bool onlineStatus = 2; //准备状态 true --准备 false --未准备 bool readyStatus = 3; //游戏币数,(精确到分) int64 coins = 4; //座位ID 0，1，2，3 int32 seatId = 5; //昵称 string nickName = 6; //头像url string headUrl = 7; //用户IP string ip = 8; // 性别 0-没有设置,1--男 2--女 int32 sex = 9; //总积分 int32 totalJiFen = 10; //登录地址 string loginAddress = 11; } 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 8801 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 8802 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 8803 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; //房间列表 message EventRoomList { // IResponse 8804 // 房间列表 repeated EventRoomInfo items = 1[packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; // 大厅内有房间内变化,广播所有大厅里不在房间内玩家 message EventUseRoomChange { // IResponse 8805 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 快速开始-不用填房间号\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { //IRequest 8806 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; //房间信息 message EventRoomInfo { //IResponse 8807 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中,5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7[packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 8808 //true-准备 false--取消准备 bool isReady = 1; } 玩家变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 8809 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4[packed = false]; } 游戏信息 import \u0026#34;use_out.proto\u0026#34;; import \u0026#34;multiple.proto\u0026#34;; message PBGameInfo { // IResponse 8810 // 是否应该抢地主 bool isLandlord = 1; // 可选抢地主底分(isLandlord为true才有效) repeated int32 landlordScore = 2 [packed = false]; // 是否强制抢地主 bool isForceLandLord = 3; // 地主用户id(有地主之后才有效) int32 bankerUserId = 4; // 地主座位id(有地主之后才有效) int32 bankerSeatId = 5; // 当前加倍玩家的座位号 int32 choiceSeatId = 6; // 底牌(有地主之后才有效) repeated int32 wildCards = 7 [packed = false]; // 是否应该选择加倍 bool isPlus = 8; // 地主是否明牌 bool LandlordIsOpen = 9; // 地主手牌(地主明牌才有效) repeated int32 LandlordPai = 10 [packed = false]; // 是否应该选择明牌 bool isOpen = 11; // 是否应该选择反加倍 bool isBack = 13; // 已加倍的玩家座位号 0-表示没有轮到加倍,1-加倍,2-不加倍 repeated int32 plusSeatId = 14 [packed = false]; // 地主是否反加倍 bool LandlordIsBack = 15; // 当前桌牌(按出牌顺序) repeated PBUseOut desktopPai = 16 [packed = false]; // 当前手牌 repeated int32 handPai = 17 [packed = false]; // 能否出牌 bool canOutPai = 18; // 是否必须出牌 bool mustOutPai = 19; // 出牌token string outPaiToken = 20; // 当前出牌座位号 int32 curOutPaiSeat = 21; // 每个玩家剩余张数(座位号为下标),小于等于5张才有效 repeated int32 restNum = 22 [packed = false]; // 选择抢地主时，还剩余多少秒考虑时间 int32 remainLandlordTime = 23; // 出牌时的剩余时间 int32 remainOutTime = 24; // 每个玩家历史抢地主分数(座位号为下标) // 0-表示没有轮到抢,1-1分,2-2分,3-3分,4-不抢 repeated int32 historyLandlord = 25 [packed = false]; // 是否处于托管中 repeated bool isEntrust = 26 [packed = false]; // 还有几次取消托管的机会 int32 cancelEntrustCount = 27; // 倍数描述 PBMultiple multiple = 28; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { } 提示玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家的投票情况 message EventPlayerVote { int32 userId = 1; string nickName = 2; //投票结果 0--未投票 1--同意 2--拒绝 int32 vote = 3; } // 提示玩家投票及广播解散意见,玩家如果没有投票,则提示投票,否则仅显示 message EventQueryDismassRoom { // IResponse 8812 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3[packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { //true--同意 false--拒绝 bool isAgree = 1; } 广播解散结果 syntax = \u0026#34;proto3\u0026#34;; package event; //解散房间的结果 message EventNoticeDismassRoom { // IResponse 8814 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 请求LBS syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 8815 } 回复LBS syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseGeoItem { //起始用户ID int32 srcUid = 1; //结束用户ID int32 destUid = 2; //用户之间距离 string distance = 3; //用户之间距离,数值表示,单位(米) int32 gap = 4; } //玩家间距离回包 message EventUseGeo { // IResponse 8816 // 用户ID列表 repeated int32 uids = 1[packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2[packed = false]; } 请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { } 顶号 syntax = \u0026#34;proto3\u0026#34;; package event; //同个用户新登陆踢出旧登陆 message EventKickOut { // IResponse 8818 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 8819 } 回复历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; message EventHistoryScoreItem { // 用户ID int32 userId = 1; // 下标-局数,值-积分 repeated int32 scores = 2[packed = false]; } // 历史积分回包 message EventUseHistoryScore { // IResponse 8820 repeated EventHistoryScoreItem items = 1[packed = false]; } 近距离提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 8821 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 8822 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAssignPai { // IResponse 8831 // 系统开始发的手牌 repeated int32 pai = 1[packed = false]; } 广播底牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播底牌 message PBWildCards { // IResponse 8864 // 地主用户id int32 bankerUserId = 1; // 地主座位id int32 bankerSeatId = 2; // 底分 int32 baseScore = 3; // 底牌 repeated int32 pai = 4 [packed = false]; // 每个玩家倍数描述(座位号为下标) repeated PBMultiple multiples = 5 [packed = false]; } 提示明牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示地主明牌 message PBHintOpen { // IResponse 8865 // 地主座位号 int32 seatId =1; // 倒计时 int32 countdown = 2; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 8823 } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAssignPai { // IResponse 8831 // 系统开始发的手牌 repeated int32 pai = 1[packed = false]; } 提示抢地主 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintLandlord { // IResponse 8832 // 是否能选择叫地主 bool canLandlord = 1; // 当前叫牌者座位号 int32 seatId = 2; // 当前叫牌者用户id int32 userId = 3; // 剩余多少秒的考虑时间 int32 countdown = 4; // 是否必须叫3分 bool mustBigScore = 5; // 允许的底分 repeated int32 score = 6 [packed = false]; } 玩家是否抢地主 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskLandlord { // IRequest 8833 // 是否抢地主 bool isLandlord = 1; // 底分 int32 score = 2; } 广播抢地主 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; // 广播玩家抢地主 message PBUseLandlord { // IResponse 8834 // 玩家座位号 int32 seatId = 1; // 玩家ID int32 userId = 2; // 是否抢地主 bool isLandlord = 3; // 底分 int32 score = 4; // 每个玩家倍数描述(座位号为下标) repeated PBMultiple multiples = 5 [packed = false]; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintOut { // IResponse 8836 // 出牌token string token =1; // 当前出牌者座位号 int32 seatId =2; // 是否必须出牌 bool isForce = 3; // 倒计时 int32 countdown = 4; //是否要的起 bool canPlay = 5; } 玩家出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 8837 // 出牌token,处理重复出牌 string token=1; // 此次出的牌 repeated int32 pai = 2[packed = false]; // 是否不出 bool isSkip = 3; } 倍数结构 syntax = \u0026#34;proto3\u0026#34;; package event; message PBMultiple{ // 底分 int32 base = 1; // 明牌 int32 open = 2; // 春天 int32 spring = 3; // 反春 int32 antiSpring = 4; // 炸弹(所有玩家出的炸弹之和) int32 bomb = 5; // 是否达到炸弹上限 bool isBombLimit = 6; // 公共倍数 int32 common = 7; // 农民加倍 int32 plus = 8; // 地主反加倍 int32 back = 9; // 总倍数 int32 sum = 10; } 广播出牌 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; message PBUseOut { // IResponse 8838 // 出牌玩家座位号 int32 seatId = 1; // 出牌玩家用户id int32 userId = 2; // 出的牌 repeated int32 pai = 3 [packed = false]; // 牌分类,1-单张,2-对子,3-3张,4-3带1,6-顺子,7-连对, // 10-4炸,30-3带一对,31-飞机不带牌,32-飞机带单,33-飞机带对 // 34-火箭,36-4带2,38-4带两对 int32 paiClass = 4; // 牌掩码,例如单张3,见文档 int32 paiMask = 5; // 第几轮 int32 roundIndex = 6; // 同一轮第几次 int32 roundSerial = 7; // 是否不出 bool isSkip = 8; // 剩余张数(出牌玩家的) int32 restNum = 9; // 每个玩家炸弹数量(座位号为下标) repeated int32 bombNum = 10 [packed = false]; // 每个玩家倍数描述(座位号为下标) repeated PBMultiple multiples = 11 [packed = false]; // 出完顺序 0--没出完 1--出完 int32 overOrder = 12; } 广播清桌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBClearDesktop { // IResponse 8839 // 大牌的玩家座位号 int32 seatId =1; // 大牌的玩家用户id int32 userId =2; // 第几轮 int32 roundIndex = 3; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; //用户的手牌 message PBTanPaiItem { //玩家ID int32 userId = 1; //玩家ID int32 seatId = 2; //手牌 repeated int32 normalPai = 3 [packed = false]; } //摊牌 message PBTanPai { // IResponse 8840 repeated PBTanPaiItem items = 1 [packed = false]; //结算状态 // 0-流局,1-解散,2-地主胜,3-农民胜,4-春天,5-反春 int32 overStatus = 2; //地主座位 int32 landlordSeat = 3; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; message PBSmallMeta { //玩家ID int32 userId = 1; //玩家昵称 string nickName = 2; //当前总游戏币(精确到分) int64 totalCoins = 3; //此局输赢分(牌局结束输赢+炸弹),赢分为正数,输分为负数 int32 winScore = 4; //出完顺序,0-没出完,1-出完 int32 overOrder = 5; //是否地主(此局第一个出牌人) bool isLandlord = 6; //自已是否加倍(农民有效) bool isPlus = 7; //是否明牌(地主有效) bool isOpen = 8; //自已是否反加倍(地主有效) bool isBack = 9; // 倍数描述 PBMultiple multiple = 10; //炸弹输赢分,赢分为正数,输分为负数 int32 bombScore = 11; //此局输赢游戏币数,单位：分,赢为正数,输为负数 int32 winCoins = 12; } message PBSmallSettlement { // IResponse 8841 // IResponse 8841 //房间号 int32 id = 1; //房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; //当前局数 int32 now = 3; //下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; //总局数 int32 total = 5; //玩法名称 string name = 6; //玩法描述 string doc = 7; //时间 string time = 8; //各玩家的情况,座位号为下标 repeated PBSmallMeta players = 9 [packed = false]; //房间底分 int32 baseScore = 10; //结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 11; // 底牌 repeated int32 wildCards = 12 [packed = false]; //结束文字说明 string overDoc = 13; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;assign_pai.proto\u0026#34;; // 回放游戏信息 message PBReplayGame { // IResponse 8842 // 地主用户id int32 bankerUserId = 1; // 地主座位id int32 bankerSeatId = 2; // 系统发的手牌,按座位号为下标 repeated PBAssignPai handPai = 3 [packed = false]; // 底牌 repeated int32 wildCards = 4 [packed = false]; // 底分 int32 baseScore = 5; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; message PBReplayCell { //对应的事件ID int32 eventId = 1; //事件对应序列化后的proto内容 bytes eventData = 2; } //回放,客户端要求 message PBReplay { // IResponse 8855 repeated PBReplayCell cells = 1[packed = false]; } 取消托管模式 // 取消托管 message EventCancelEntrust { // IRequest 8857 } 广播用户进入托管模式 // 广播用户进入托管 message EventInEntrust { // IResponse 8856 // 进入托管用户的座位号 int32 seat = 1; // 还有多少次可以取消托管 int32 count = 2; } 广播托管模式 // 取消托管成功 message EventCancelEntrustDone { // IResponse 8858 // 取消托管用户座位号 int32 seat = 1; } 创建VIP房间 message EventCreateVIPRoom { // IRequest 8859 } 加入VIP房间 message EventJoinVIPRoom { // IRequest 8860 string pwd = 2; } 提示反加倍 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示地主反加倍 message PBHintBack { // IResponse 61 // 地主座位号 int32 seatId =1; // 已加倍的玩家座位号 repeated int32 plusSeatId = 2[packed = false]; } 回复反加倍 syntax = \u0026#34;proto3\u0026#34;; package event; // 地主反加倍 message PBAskBack { // IRequest 8862 // 是否反加倍 bool isBack = 1; } 广播反加倍 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; // 提示地主反加倍 message PBHintBack { // IResponse 8861 // 地主座位号 int32 seatId =1; // 已加倍的玩家座位号 repeated int32 plusSeatId = 2[packed = false]; // 倒计时 int32 countdown = 3; } 回复明牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 地主明牌 message PBAskOpen { // IRequest 8866 // 是否明牌 bool isOpen =1; } 广播明牌 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; // 广播地主明牌 message PBUseOpen { // IResponse 8867 // 地主座位号 int32 seatId =1; // 是否明牌 bool isOpen =2; // 手牌(必须明牌才有效) repeated int32 pai = 3[packed = false]; // 每个玩家倍数描述(座位号为下标) repeated PBMultiple multiples = 4[packed = false]; } 提示加倍 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示玩家加倍 message PBHintPlus { // IResponse 8868 // 加倍玩家座位号 int32 seatId =1; // 倒计时 int32 countdown = 2; } 回复加倍 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家请求加倍 message PBAskPlus { // IRequest 8869 // 是否加倍 bool isPlus =1; } 广播加倍 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;multiple.proto\u0026#34;; // 广播玩家加倍 message PBUsePlus { // IResponse 8870 // 玩家座位号 int32 seatId =1; // 是否加倍 bool isPlus =2; // 每个玩家倍数描述(座位号为下标) repeated PBMultiple multiples = 3[packed = false]; } "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/",
	"title": "服务端剖析",
	"tags": [],
	"description": "",
	"content": "游戏服设计图 graph TD 游戏服 --\u003e 房间1 游戏服 --\u003e 房间2 游戏服 --\u003e 房间3 游戏服 --\u003e 房间4 游戏服 --\u003e 房间5 游戏服 --\u003e 房间6 游戏服 --\u003e 房间N... 房间4 --\u003e 第1局 房间4 --\u003e 第2局 房间4 --\u003e 第3局 房间4 --\u003e 第4局 房间4 --\u003e 第5局 房间4 --\u003e 第6局 房间4 --\u003e 第N...局 第4局 --\u003e 第1轮 第4局 --\u003e 第2轮 第4局 --\u003e 第3轮 第4局 --\u003e 第4轮 第4局 --\u003e 第5轮 第4局 --\u003e 第6轮 第4局 --\u003e 第N...轮 第4轮 --\u003e 出牌1 第4轮 --\u003e 出牌2 第4轮 --\u003e 出牌3 第4轮 --\u003e 出牌4 第4轮 --\u003e 出牌5 第4轮 --\u003e 出牌N... 第4轮 --\u003e 都不要 扑克牌比较 牌型识别 graph TD 66644 --\u003e 5张牌 5张牌 --\u003e C{3带2/5连顺/5炸?} C --\u003e 3张6带2 大王小王 --\u003e 2张牌 2张牌 --\u003e D{对子/王炸?} D --\u003e 大小王炸 牌型大小比较 66644\u0026ndash;\u0026gt;3带2 \u0026ndash; 有序数组 \u0026ndash;\u0026gt; 3张3-3张2,510K,炸弹\u0026ndash;\u0026gt;包括大小王炸\u0026ndash;\u0026gt;牌值为大王小王 大王小王 \u0026gt; 66644\n牌型排序 graph TD 牌型 --\u003e 单张 牌型 --\u003e 对子 牌型 --\u003e 3带2 牌型 --\u003e 顺子 牌型 --\u003e 连对 牌型 --\u003e 飞机 牌型 --\u003e 510K 牌型 --\u003e 炸弹 单张 -- 有序数组 --\u003e 3-2,510K,炸弹 对子 -- 有序数组 --\u003e 对3-对2,510K,炸弹 3带2 -- 有序数组 --\u003e 3张3-3张2,510K,炸弹 顺子 --\u003e 5连顺 5连顺 -- 有序数组 --\u003e 3到7-10到A,510K,炸弹 顺子 --\u003e ...连顺 连对 --\u003e 2连对 2连对 -- 有序数组 --\u003e 34连对-KA连对,510K,炸弹 连对 --\u003e ...连对 飞机 --\u003e 2飞机 2飞机 -- 有序数组 --\u003e 34飞机-KA飞机,510K,炸弹 飞机 --\u003e ...飞机 510K --\u003e 副510K 副510K -- 有序数组 --\u003e 正510K,炸弹 510K --\u003e 正510K 正510K-- 有序数组 --\u003e 炸弹 炸弹 --\u003e 王炸 王炸 --\u003e 一对小王 王炸 --\u003e 一对大王 王炸 --\u003e 大小王 炸弹 --\u003e 4炸 4炸 -- 有序数组 --\u003e 4张3-4张2,5炸,... 炸弹 --\u003e ...炸 麻将平胡算法 实例演示 graph TB all(1万1万1万6筒7筒8筒1条2条3条5条6条7条西西) char(1万1万1万) dot(6筒7筒8筒) bamboo(1条2条3条5条6条7条) bb1(1条2条3条) bb2(5条6条7条) wind(西西) all-- 万子牌 --\u003echar all-- 筒子牌 --\u003edot all-- 条子牌 --\u003ebamboo all-- 风字牌 --\u003ewind bamboo-- 间隔大于1 --\u003ebb1 bamboo-- 间隔大于1 --\u003ebb2 char--\u003e刻子 dot--\u003e顺子 wind--\u003e将牌 bb1--\u003e顺子 bb2--\u003e顺子 刻子--\u003e平胡 顺子--\u003e平胡 将牌--\u003e平胡 拆分-按花色-同花色按连续性 graph TB all(手牌) all-- 万 --\u003e万子牌 all-- 筒 --\u003e筒子牌 all-- 条 --\u003e条子牌 all-- 风 --\u003e风字牌 all-- 剑 --\u003e中发白 万子牌-- 间隔大于1 --\u003e万小块1 万子牌-- 间隔大于1 --\u003e万小块2 万子牌-- 间隔大于1 --\u003e万小块3 筒子牌-- 间隔大于1 --\u003e筒小块1 筒子牌-- 间隔大于1 --\u003e筒小块2 筒子牌-- 间隔大于1 --\u003e筒小块3 条子牌-- 间隔大于1 --\u003e条小块1 条子牌-- 间隔大于1 --\u003e条小块2 条子牌-- 间隔大于1 --\u003e条小块3 万小块1-- 可能是 --\u003e刻子 万小块2-- 可能是 --\u003e顺子 万小块3-- 可能是 --\u003e将牌 筒小块1-- 可能是 --\u003e刻子+刻子 筒小块2-- 可能是 --\u003e顺子+顺子 筒小块3-- 可能是 --\u003e刻子/顺子+将牌 条小块1-- 可能是 --\u003e刻子+刻子+刻子 条小块2-- 可能是 --\u003e顺子+顺子+刻子 条小块3-- 可能是 --\u003e刻子+顺子+将牌 风字牌-- 可能是 --\u003e顺子+将牌 刻子--\u003e平胡 顺子--\u003e平胡 将牌--\u003e平胡 刻子+刻子--\u003e平胡 顺子+顺子--\u003e平胡 刻子/顺子+将牌--\u003e平胡 刻子+刻子+刻子--\u003e平胡 顺子+顺子+刻子--\u003e平胡 刻子+顺子+将牌--\u003e平胡 块-去花色-记数量-5进制编码-排序-查找 graph LR 31万(1万1万1万) 34筒(4筒4筒4筒) 38条(8条8条8条) 13万(1万2万3万) 13筒(4筒5筒6筒) 13条(7条8条9条) 141万(1万22222万3万) 141筒(5筒6666筒7筒) 141条(3条4444条5条) 1223万(1万2万2万3万3万4万) 1223筒(4筒5筒5筒6筒6筒7筒) 1223条(6条7条7条8条8条9条) e1(3*1) e2(1*25+1*5+1) e3(1*125+2*25+2*5+1) e4(1*25+4*5+1) 31万-- 等价于 --\u003e34筒 34筒-- 等价于 --\u003e38条 38条-- 记作块 --\u003e3 3-- 5进制编码 --\u003ee1 13万-- 等价于 --\u003e13筒 13筒-- 等价于 --\u003e13条 13条-- 记作块 --\u003e1-1-1 1-1-1-- 5进制编码 --\u003ee2 1223万-- 等价于 --\u003e1223筒 1223筒-- 等价于 --\u003e1223条 1223条-- 记作块 --\u003e1-2-2-1 1-2-2-1-- 5进制编码 --\u003ee3 141万-- 等价于 --\u003e141筒 141筒-- 等价于 --\u003e141条 141条-- 记作块 --\u003e1-4-1 1-4-1-- 5进制编码 --\u003ee4 e1-- 长度为key --\u003emap e2-- 长度为key --\u003emap e3-- 长度为key --\u003emap e4-- 长度为key --\u003emap "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E9%94%99%E8%AF%AF%E7%A0%81/",
	"title": "公共错误码",
	"tags": [],
	"description": "",
	"content": " 错误码 描述 01 success 02 数据反序化失败 03 地区玩法错误 04 未知事件 05 没有该用户 06 用户未登录 07 用户验证失败 08 用户重复登录 09 已加入其他游戏 10 已登陆其他服务器 12 加入房间失败 13 房间不存在 14 房间已经满人 15 用户已在房间中 16 该用户没有在任何房间 20 重复申请解散 27 重复解散投票 21 房间不在解散中 22 获取距离失败 23 退出房间失败 24 房间不在准备中 28 用户不在当前房间 29 房间已开始游戏 30 坐下失败,游戏币不足 31 没有空房间 32 重复准备 33 用户已在其他设备登陆 34 用户信息读取失败 35 准备失败,游戏币不足 36 创建VIP房间失败,游戏币不足 37 VIP房间, 加入失败 38 加入VIP房间失败, 密码错误 45 房间不在游戏中 52 取消托管失败 53 数据库操作失败 54 你处于托管中 39 非VIP房间 70 未开启定位不允许进房间 71 近距离不允许进房间 "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E5%85%AC%E5%85%B1%E6%9C%8D/",
	"title": "公共服",
	"tags": [],
	"description": "",
	"content": "调用图 graph TD 客户端APP --\u003e loop loop --\u003e IgnoreLogin(无需登陆) loop --\u003e AfterLogin(要求登陆) loop --\u003e RegisterLogin(登陆) AfterLogin --\u003e 设置用户 AfterLogin --\u003e 充值列表 AfterLogin(要求登陆) --\u003e 打盾场次列表 AfterLogin(要求登陆) --\u003e 战绩列表 AfterLogin(要求登陆) --\u003e 其他命令... 设置用户 --\u003e set_user.go 充值列表 --\u003e recharge_list.go 打盾场次列表 --\u003e game_510k.go 战绩列表 --\u003e archive_detail.go "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E6%9C%8D/",
	"title": "公共服",
	"tags": [],
	"description": "",
	"content": "错误码 9100~9199 公共服\n错误码 描述 9100 success 9101 参数错误 9102 数据库错误 9103 数据反序化失败 9104 游戏玩法ID错误 9105 未知事件 9106 服务器错误 9107 用户未登录 9108 用户重复登录 9109 已在其他设备登录 9110 验证码失效 9111 验证码错误 9112 验证码次数超限 9113 验证码发送失败 9114 短信发送失败 9115 手机号码错误 9116 短信发送成功 9120 用户已存在 9121 用户验证失败 9122 用户不存在 9123 帐号被禁用 9141 数据长度超限 9143 无场次信息 9144 不能发送给自己 9145 用户信息错误 9146 手机号码格式不对 9147 请求第三方服务失败 9148 微信支付失败 9149 不允许微信h5支付 9150 不允许微信APP支付 9151 地区ID不存在 9152 用户已经设置地区ID 9153 不允许支付宝H5支付 9154 房间不存在 9155 房间已开始游戏 9156 该用户没有在任何房间 事件定义 从9100到9199 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送给客户端\n事件编号 事件名称 事件流向 是否返回 描述 9100 生成验证码 c-\u0026gt;s true 通用回包 9102 通用回包 s-\u0026gt;c 9103 登录 c-\u0026gt;s true 成功登录回包,再推送用户信息 ，失败通用回包 9104 登录回包 s-\u0026gt;c 9105 心跳 s-\u0026gt;c true 原样回包 9106 查询用户信息 c-\u0026gt;s true 成功查询用户信息回包,失败通用回包 9107 查询用户信息回包 s-\u0026gt;c 9108 设置用户信息 c-\u0026gt;s true 通用回包 9113 用户退出 c-\u0026gt;s true 通用回包 9114 客服 c-\u0026gt;s true 成功客服回包,失败通用回包 9115 客服回包 s-\u0026gt;c 9123 充值列表 c-\u0026gt;s true 成功充值列表回包,失败通用回包 9124 充值列表回包 s-\u0026gt;c 9127 公告列表 c-\u0026gt;s true 成功公告列表回包,失败通用回包 9128 公告列表回包 s-\u0026gt;c 9134 游戏内最新消息 s-\u0026gt;c - 客户端请求时，所有失败的都会返回9102，以下不会再注明，请知悉！\n事件ID 描述 事件流向 返回事件ID 注备 9102 服务器返回 s-\u0026gt;c - - 9136 新消息 s-\u0026gt;c - 登录时或有新消息时推送 9137 查询联系人 c-\u0026gt;s 9138 - 9138 联系人列表 s-\u0026gt;c - - 9139 发消息 c-\u0026gt;s 9140 - 9140 消息发送成功回包 c-\u0026gt;s - 9150 战绩列表 c-\u0026gt;s 成功回战绩列表回包,失败通用回包 9151 战绩列表回包 s-\u0026gt;c - 9152 战绩详情 c-\u0026gt;s 成功回战绩详情回包,失败通用回包 9153 战绩详情回包 s-\u0026gt;c - 9154 战绩详情回放 c-\u0026gt;s 成功回战绩详情回放回包,失败通用回包 9155 战绩详情回放回包 s-\u0026gt;c - 9156 搜索用户 c-\u0026gt;s 成功回搜索用户回包,失败通用回包 9157 搜索用户回包 s-\u0026gt;c 9165 短信提醒 c-\u0026gt;s true 通用回包 9175 发起微信支付 c-\u0026gt;s true 成功回发起微信支付回包,失败通用回包 9176 发起微信支付回包 s-\u0026gt;c 9177 查询微信结果 c-\u0026gt;s true 成功回查询微信结果回包,失败回通用回包 9178 查询微信结果回包 s-\u0026gt;c 9180 查询在线支付是否可用 c-\u0026gt;s true 返回在线支付是否可用 9181 返回在线支付是否可用 s-\u0026gt;c 9182 请求在线信息 c-\u0026gt;s true 成功回请求在线信息回包, 失败回通用回包 9183 请求在线信息回包 s-\u0026gt;c 9184 用户设置地区ID c-\u0026gt;s true 成功失败回通用回包 9189 游戏入口列表 c-\u0026gt;s true 成功游戏入口列表回包,失败通用回包 9190 游戏入口列表回包 s-\u0026gt;c 9191 进入游戏某场次 c-\u0026gt;s true 成功进入游戏某场次回包,失败通用回包 9192 进入游戏某场次回包 s-\u0026gt;c 9193 游戏邀请 c-\u0026gt;s true 成功回游戏邀请回包,失败通用回包 9194 游戏邀请回包 s-\u0026gt;c PB结构定义 游戏邀请 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏邀请请求 message EventGameInvite { // IRequest 9193 // 邀请人id int32 uId = 1; } 游戏邀请回包 // 游戏邀请回包 message EventGameInviteReturn { // IResponse 9194 // 房间IP string ip =1; // 房间端口 int32 port =2; // 游戏房间号 int32 roomId =3; // 玩法Id int32 playId =4; // 玩法场次级别 int32 playGrade =5; // 房间密码(如果为空,则无密码,否则有密码,是VIP房间) string pwd = 6; // 邀请人id int32 uId = 7; // 邀请人昵称 string nickName = 8; } 用户设置地区ID message EventSetArea { // IRequest 9184 // 地区ID, 值在『游戏定义』里 int32 areaId = 1; } 请求在线信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求在线信息 message EventOnlineInfo { // IRequest 9182 } 请求在线信息回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求在线信息回包 message EventOnlineInfoReturn { // IResponse 9183 // 玩家人数 int32 onlinePlayers = 1; } 查询在线支付是否可用 syntax = \u0026#34;proto3\u0026#34;; package event; // 查询在线支付是否可用 message EventOnlinePayValid { // IRequest 9180 } 返回在线支付是否可用 // 返回在线支付是否可用 message EventOnlinePayResponse { // IResponse 9181 message Valid { // 1-微信H5支付 2-微信App支付 3-支付宝H5支付 int32 kind = 1; // 0-不可用 1-可用 int32 status = 2; } repeated Valid list = 1[packed = false]; } 查询微信结果回包 // 查询微信结果回包 message EventWXAPPPayReturn { // IResponse 9178 // 订单号 string orderId = 1; // 用户的总余额（单位：元） double allAccount = 2; // 用户充值的金额（单位：元） double payMoney = 3; // 充值时间 int64 payTime = 4; } 查询微信结果 // 查询微信结果 message EventWXAPPPayQuery { // IRequest 9177 // 订单ID string orderId = 1; } 发起微信支付回包 // 发起微信支付请求 message EventWXAppPrePay { // IResponse 9176 string appid = 1; string partnerid = 2; string prepayid = 3; string package = 4; string noncestr = 5; string timestamp = 6; string sign = 7; // 商户的订单ID，用户查询支付结果 string orderId = 8; } 发起微信支付 // 发起微信支付请求 message EventWXAPPPay { // IRequest 9175 // 充值金额 int32 money = 1; } 短信提醒 syntax = \u0026#34;proto3\u0026#34;; package event; // 短信提醒 message EventSmsNotice { // IRequest 9165 // 用户id int32 uid = 1; } 消息发送成功回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 消息发送成功回包 message EventSendSuccess { // IResponse 9140 PBReceiveMessageBody body = 1; } 发消息 syntax = \u0026#34;proto3\u0026#34;; package event; // 发送的消息体 message PBSendMessaBody { // 消息内容 string msg = 1; // 消息类型 0-纯文本，1-图片，2-语音 int32 mType = 2; } // 发消息 message EventSendMsg { // IRequest 9139 // 消息 PBSendMessaBody body = 1; // 接收者 int32 uid = 2; // 是否为内存转发的消息(客户端忽略该字段) bool isForwardMsg = 3; // 是否是第一次发消息 bool isFirst = 4; } 联系人列表 syntax = \u0026#34;proto3\u0026#34;; package event; // 联系人列表 message EventFriendList { // IResponse 9138 repeated PBBaseUser list = 1[packed = false]; // 是否是搜索出来的(true-是，false-否） bool isSearch = 2; } 查询联系人 syntax = \u0026#34;proto3\u0026#34;; package event; // 查询联系人 message EventSearchFriend { // IRequest 9137 // 关键字, 查全部时为空 string keyWord = 1; } 新消息 syntax = \u0026#34;proto3\u0026#34;; package event; // 接收的消息体 message PBReceiveMessageBody { // 发送者的用户 PBBaseUser user = 1; // 消息内容 string msg = 2; // 发送时的时间 int64 sendTime = 3; // 消息类型 0-纯文本，1-图片，2-语音 int32 mType = 4; // 接收者ID PBBaseUser receiveUser = 5; } // 用户基础信息 message PBBaseUser { int32 uid = 1; string nickname = 2; string headURL = 3; string phone = 4; // 最近玩的游戏ID 0-表示没有最近游戏，大于0的表示游戏ID(查wiki） int32 playerId = 5; // 玩家的地区ID int32 areaId = 6; } // 接收的新消息 message EventNewMessage { // IResponse 9136 // 消息列表 repeated PBReceiveMessageBody list = 1[packed = false]; } 用户信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 用户的房间信息 message PBRoom { // 用户ID int32 uid = 1; // 房间IP string ip = 2; // 房间端口 int32 port = 3; // 游戏房间号 int32 roomId = 4; // 玩法Id int32 playId = 5; } // 用户登录后的用户各种信息 message PBUserInfo { // 用户ID int32 uid = 1; // 用户房间（如果在房间里） PBRoom room = 2; // 用户的社交消息 EventNewMessage socialMessage = 3; // 用户在房间里时的聊天消息 EventGameNewMessage gameMessage = 4; // 用户头像 string headURL = 5; // 用户地区ID int32 areaId = 6; } 游戏内最新消息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏内转发消息 message EventGameNewMessage { // IResponse 9134 message Message { // 发送者 int32 uid = 1; // 发送时间 int64 sTime = 2; // 消息类型 0-纯文本，1-图片，2-语音，3-快捷语 int32 mType = 3; // 消息内容 string msg = 4; // 游戏房间号 int32 roomId = 5; } repeated Message list = 1[packed = false]; } 游戏内发消息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏内发送消息 message EventGameSendMessage { // IRequest 9133 // 接收者 int32 uid = 1; // 消息类型 0-纯文本，1-图片，2-语音，3-快捷语 int32 mType = 2; // 消息内容 string msg = 3; // 游戏房间号 int32 roomId = 4; // 是否为内部转发的消息(客户端忽略该字段) bool isForwardMsg = 5; } 进入游戏某场次 syntax = \u0026#34;proto3\u0026#34;; package event; // 进入游戏某场次 message EventGameGoldIn { // IRequest 9191 // 游戏id int32 gameId = 1; // 场次级别 int32 grade = 2; } 进入游戏某场次回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 进入某场次回包 message EventGameGoldReturn { // IResponse 9192 // 底分 int32 baseScore = 1; // 准入分 int32 entryScore = 2; // 场次级别 int32 grade = 3; // ip string ip = 4; // 端口 int32 port = 5; // 游戏id int32 gameId = 6; } 游戏入口列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventGameGoldSceneRequest { // IRequest 9189 // 游戏id int32 gameId = 1; } 游戏入口列表回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventGameGoldSceneList { // IResponse 9190 message Scene { // 底分 int32 baseScore = 1; // 准入分 int32 entryScore = 2; // 场次级别 int32 grade = 3; } repeated Scene list = 1[packed = false]; // 游戏id int32 gameId = 2; } 生成验证码 根据phone+gcode生成随机4位数的验证码 生成的验证码写入redis 然后短信发送给注册phone 有效期5分钟，验证成功后失效，5分钟未验证均为失效\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventVCode { //用户id string phone = 1; //国家编号 string gcode = 2; //客户端校验 md5(phone + gcode + secret_key) 服务端和客户端约定secret_key string secretString = 3; } 通用回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { //事件ID int32 eventId = 1; //返回码 9100--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 注册 先到redis验证vcode的有效性 然后直接入数据库，phone+gcode唯一 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRegister { //手机号 string phone = 1; //国家编号 string gcode = 2; //用户验证码 string vcode = 3; //用户登录密码 string pwd = 4; //客户端校验 md5(phone + gcode + vcode + pwd + secret_key) 服务端和客户端约定secret_key string secretString = 5; } 登录 先验证secretString的合法性 到redis验证token，验证成功后不需要验证用户名和密码； 失败则验证phone+gcode和pwd，然后生成token，写入redis. syntax = \u0026#34;proto3\u0026#34;; package event; message EventPublicLogin { //手机号 string phone = 1; //用户登录标识 string token = 2; //国家编号 string gcode = 3; //用户登录密码 string pwd = 4; //客户端校验 md5(phone + token + gcode + pwd + vcode + secret_key) 服务端和客户端约定secret_key string secretString = 5; //用户验证码 string vcode = 6; // 极光推送的注册ID string registrationID = 7; } 登录回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 新人引导微信群 message WeiXinGroup { // 区域交流群-崇仁 string chongRenCopy = 1; // 区域交流群-乐安 string leAnCopy = 2; // 区域交流群-宜黄 string yiHuangCopy = 3; // 游戏交流群-崇仁打盾 string chongRenScroll = 4; // 游戏交流群-乐安打盾 string leAnScroll = 5; // 游戏交流群-宜黄红心5 string yiHuangScroll = 6; // 区域交流群-东乡 string dongxiangCopy = 7; // 区域交流群-临川 string linchuangCopy = 8; // 官方交流群 string governmentCopy = 9; } message EventPublicLoginReturn { // IResponse 9104 //返回码 0--表示成功 其它的为错误 int32 code = 1; //描述 string message = 2; //token string token = 3; //用户id int32 uid = 4; // 用户信息 PBUserInfo userInfo = 5; //上传图像网址 string uploadImgUrl = 6; // 用户昵称 string nickname = 7; //推广注册网址 string registerUrl = 8; // 微信h5支付网址 string weixinPayUrl = 9; // 在线玩家数 int32 onlinePlayers = 10; // 新人引导微信群 WeiXinGroup group = 11; } 心跳 syntax = \u0026#34;proto3\u0026#34;; package event; // 心跳保持 message EventHeartBeat{ } 查询用户信息 根据uid从数据库表user查询用户昵称，头像手机号，绑定的银行卡号，支付宝号，微信号 等信息\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventGetUser { } 查询用户信息回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventGetUserReturn { //用户id int32 uid = 1; //手机号 string phone = 2; //国家编号 string gcode = 3; //昵称 string nickname = 4; //游戏币数(单位/分) int64 account = 5; //微信号 string wxid = 6; //支付宝号 string alipayid = 7; //银行卡号 string bankid = 8; //银行名称 string bankname = 9; //支行名称 string bankbranch = 10; //头像标示 存储在客户端 string userimg = 11; //推荐人 int32 refereeid = 12; //银行帐号姓名 string bankusername = 13; //银行省份 string bankprovince = 14; //银行城市 string bankcity = 15; // 性别,0-没设置,1-男性,2-女性 int32 sex = 16; } 设置用户信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventSetUser { //昵称 string nickname = 1; //微信号 string wxid = 2; //支付宝号 string alipayid = 3; //银行卡号 string bankid = 4; //银行名称 string bankname = 5; //支行名称 string bankbranch = 6; //头像标示 string userimg = 7; //推荐人 int32 refereeid = 8; //银行帐号姓名 string bankusername = 9; //银行省份 string bankprovince = 10; //银行城市 string bankcity = 11; // 性别,0-没设置,1-男性,2-女性 int32 sex = 12; // 地区ID int32 areaId = 13; } 用户退出 服务器删除token,tcp链接断开\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventLoginout { } 客服 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCustomService { } 客服回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCustomServiceReturn { // 微信客服 repeated string weixin = 1[packed = false]; // qq客服 repeated string qq = 2[packed = false]; } 充值列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRechargeList {// IRequest 9123 // 页码,第一页为0，第二页为1，以此类推 int32 pageIndex = 1; // 页大小 int32 pageSize = 2; } 充值列表回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRechargeListReturn {// IResponse 9124 // 充值项 repeated PBRechargeItem items = 1[packed = false]; // 分页是否结束 bool isPageEnd = 2; } // 充值项 message PBRechargeItem { // 金额,单位(分) int64 account = 1; // 时间(精确到秒) int32 unixTime = 2; } 公告列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeList {// IRequest 9127 } 公告列表回包 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeListReturn {// IResponse 9128 // 公告项 repeated PBNoticeItem items = 1[packed = false]; } // 公告项 message PBNoticeItem { // 内容 string content = 1; // 类型,7:官方声明,8:玩家须知,9:兑换说明 int32 type = 2; // 时间(精确到秒) int32 unixTime = 3; } 战绩列表 syntax = \u0026#34;proto3\u0026#34;; package event; // 战绩列表 message EventArchiveList { // IRequest 9150 // 页码, 第一页为0，第二页为1，以此类推 int32 pageIndex = 1; // 页大小 int32 pageSize = 2; } 战绩列表回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 战绩列表回包 message EventArchiveListReturn { // IResponse 9151 // 战绩项 repeated PBArchiveItem items = 1[packed = false]; // 分页是否结束 bool isPageEnd = 2; } // 战绩项 message PBArchiveItem { // 战绩id int32 id = 1; // 房间id int32 roomId = 2; // 游戏名称 string playName = 3; // 游戏局数 int32 playNum = 4; // 游戏等级描述 string playGrade = 5; // 结算时间(unix时间戳,精确到秒) int64 settlementTime = 7; // 玩家列表 repeated PBArchivePlayer players = 8; // 游戏前游戏币数,(精确到分) int64 StartCoins = 9; // 游戏后游戏币数,(精确到分) int64 EndCoins = 10; // 游戏Id int32 playId = 11; } // 战绩玩家 message PBArchivePlayer { // 玩家id int32 id = 1; // 玩家昵称 string nickName = 2; // 积份(有正负) int32 score = 3; } 战绩详情 syntax = \u0026#34;proto3\u0026#34;; package event; // 战绩详情 message EventArchiveDetail { // IRequest 9152 // 战绩id int32 id = 1; } 战绩详情回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 战绩详情回包 message EventArchiveDetailReturn { // IResponse 9153 // 战绩id int32 id = 1; // 房间id int32 roomId = 2; // 游戏名称 string playName = 3; // 游戏局数 int32 playNum = 4; // 战绩详情项 repeated PBArchiveDetailItem items = 5[packed = false]; } // 战绩详情项 message PBArchiveDetailItem { // 战绩详情id int32 id = 1; // 游戏局数 int32 playNum = 2; // 结算时间(unix时间戳,精确到秒) int64 settlementTime = 3; // 玩家列表 repeated PBArchivePlayer players = 4; } 战绩详情回放 syntax = \u0026#34;proto3\u0026#34;; package event; // 战绩详情回放 message EventArchiveDetailRecord { // IRequest 9154 // 战绩详情id int32 id = 1; } 战绩详情回放回包 syntax = \u0026#34;proto3\u0026#34;; package event; message PBReplayCell { //对应的事件ID int32 eventId = 1; //事件对应序列化后的proto内容 bytes eventData = 2; } //回放 message PBReplay { repeated PBReplayCell cells = 1[packed = false]; } // 战绩详情回放回包 message EventArchiveDetailRecordReturn { // IResponse 9155 // 战绩详情id int32 id = 1; // 回放字节流(PBReplay消息序列化后) bytes record = 2; } 上传图片接口 采用http协议,POST方法,url是[登陆成功回包]中UploadImgUrl字段 回包是json格式,详情见内容\ntype HeadImgReturn struct { // 成功为0,其他都是错误 Code int32 // 成功:文件上传后的url,错误:出错原因 Msg string } // POST方法, multipart/form-data // 参数名:token,值:用户登录标识 // 参数名:secretString,值:md5(token + secret_key),secret_key是服务端和客户端约定 // 参数名:file,value:二进制字节流 // 返回json(HeadImgReturn) 搜索用户 syntax = \u0026#34;proto3\u0026#34;; package event; // 查询指定用户 message EventSearchUser { // IRequest 9156 // 目标用户id int32 uId = 1; } 搜索用户回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 查询指定用户回包 message EventSearchUserReturn { // IRequest 9157 // 目标用户id int32 uId = 1; // 目标用户昵称 string nickName = 2; } redis结构 验证码 说明:加vcode:或vcodeday:前缀,防和其他键值冲突\nType: string Name: vcode:gcode+phone Value: vcode TTL: 5分钟 Type: string Name: vcodeday:gcode+phone Value: 次数(暂时最多10次) TTL: 一天 登陆 说明:加login:前缀,防和其他键值冲突\nType: string Name: login:token Value: uid 在线人数 说明:每次玩家登陆或退出都会更新\nType: string Name: public_player_count Value: 在线人数 "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E5%85%AC%E5%85%B1%E5%BA%93/",
	"title": "公共库",
	"tags": [],
	"description": "",
	"content": "\n代码目录: common/flow\n子目录:\nevent:protobuf自动产生,建议不要手工编辑 proto_file:protobuf协议定义,用于flow和客户app通讯,实现不同游戏的公共协议 子文件:\nbase_flow.go:实现流程图的BaseFlow base_room.go:实现流程图的BaseRoom,主要实现Roomer接口 base_room_inside.go:实现流程图的BaseRoom,房间通用功能,部分供GameRoom调用 conn_manage.go:实现流程图的tcp链接管理 lobby.go:实现游戏桌子列表功能 log_msg.go:记录客户端和游戏服收发包日志 loop.go:tcp监听和游戏服务注册 packer.go:定义Tcp协程和BaseFlow参数 player.go:实现流程图的BasePlay room_manage.go:实现流程图的房间管理 roomer.go:实现流程图的roomer接口 status.go:定义flow给客户端错误代码 timer.go:每分钟定时任务 git代码管理:dev分支\n"
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%85%AC%E5%85%B1%E5%8D%8F%E8%AE%AE/",
	"title": "公共协议",
	"tags": [],
	"description": "",
	"content": "事件定义 从 00到 99 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端\n事件编号 事件名称 事件流向 描述 备注 01 登录 c-\u0026gt;s 进入游戏要进行登录验证 02 服务器返回 s-\u0026gt;c 服务器通用返回 03 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 04 房间列表 c-\u0026gt;s 房间列表 05 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 06 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 07 房间信息 c-\u0026gt;s 房间信息 08 准备 c-\u0026gt;s 准备 09 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 10 游戏信息 s-\u0026gt;c 游戏信息 11 申请解散 c-\u0026gt;s 申请解散 12 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 13 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 14 解散房间的结果 s-\u0026gt;c 解散房间的结果 15 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 16 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 17 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 18 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 19 请求历史积分 c-\u0026gt;s 请求历史积分 20 历史积分回包 s-\u0026gt;c 历史积分回包 21 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 22 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 23 游戏信息 s-\u0026gt;c 刷新游戏信息 56 广播用户进入托管 s-\u0026gt;c 广播用户进入托管 57 取消托管 c-\u0026gt;s 用户取消托管 58 取消托管成功 s-\u0026gt;c 广播用户取消托管成功 "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86/",
	"title": "红中麻将",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9945 房间不在游戏中 9946 无权不出 9947 不出token错误 9948 必须出牌 9949 出牌token错误 9950 出牌错误 9951 无权出牌 事件定义 从9900到9999 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9901 登录 c-\u0026gt;s 进入游戏要进行登录验证 9902 服务器返回 s-\u0026gt;c 服务器通用返回 9903 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9904 房间列表 c-\u0026gt;s 房间列表 9905 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9906 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9907 房间信息 c-\u0026gt;s 房间信息 9908 准备 c-\u0026gt;s 准备 9909 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9910 游戏信息 s-\u0026gt;c 游戏信息 9911 申请解散 c-\u0026gt;s 申请解散 9912 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9913 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9914 解散房间的结果 s-\u0026gt;c 解散房间的结果 9915 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9916 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9917 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9918 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9919 请求历史积分 c-\u0026gt;s 请求历史积分 9920 历史积分回包 s-\u0026gt;c 历史积分回包 9921 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9922 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9923 游戏信息 s-\u0026gt;c 刷新游戏信息 9931 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9932 系统发牌 s-\u0026gt;c 系统发牌 9933 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9934 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9935 请求出牌 c-\u0026gt;s 请求出牌 9936 广播出牌结果 s-\u0026gt;c 广播出牌结果 9937 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9938 摊牌 s-\u0026gt;c 摊牌 9939 小局结算 s-\u0026gt;c 小局结算 9940 回放游戏信息 s-\u0026gt;c 回放游戏信息 9955 回放 c-\u0026gt;s 回放,客户端要求 9959 创建VIP房间 c-\u0026gt;s 创建VIP房间 9960 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9901 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9902 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9903 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9904 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9905 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9906 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9907 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9908 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9909 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9910 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9911 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9912 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9913 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9914 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9915 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9916 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9917 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9918 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9919 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9920 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9921 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9922 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9923 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9931 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9932 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9933 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9934 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9935 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9936 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9937 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9938 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9939 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14[packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15[packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌,则不包括最后胡的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9940 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9955 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9959 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9960 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E7%BA%A2%E4%B8%AD%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/",
	"title": "红中麻将二人场",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9645 房间不在游戏中 9646 无权不出 9647 不出token错误 9648 必须出牌 9649 出牌token错误 9650 出牌错误 9651 无权出牌 9652 操作被取消 事件定义 从9600到9699 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9601 登录 c-\u0026gt;s 进入游戏要进行登录验证 9602 服务器返回 s-\u0026gt;c 服务器通用返回 9603 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9604 房间列表 c-\u0026gt;s 房间列表 9605 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9606 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9607 房间信息 c-\u0026gt;s 房间信息 9608 准备 c-\u0026gt;s 准备 9609 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9610 游戏信息 s-\u0026gt;c 游戏信息 9611 申请解散 c-\u0026gt;s 申请解散 9612 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9613 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9614 解散房间的结果 s-\u0026gt;c 解散房间的结果 9615 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9616 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9617 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9618 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9619 请求历史积分 c-\u0026gt;s 请求历史积分 9620 历史积分回包 s-\u0026gt;c 历史积分回包 9621 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9622 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9623 游戏信息 s-\u0026gt;c 刷新游戏信息 9631 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9632 系统发牌 s-\u0026gt;c 系统发牌 9633 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9634 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9635 请求出牌 c-\u0026gt;s 请求出牌 9636 广播出牌结果 s-\u0026gt;c 广播出牌结果 9637 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9638 摊牌 s-\u0026gt;c 摊牌 9639 小局结算 s-\u0026gt;c 小局结算 9640 回放游戏信息 s-\u0026gt;c 回放游戏信息 9655 回放 c-\u0026gt;s 回放,客户端要求 9659 创建VIP房间 c-\u0026gt;s 创建VIP房间 9660 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9601 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9602 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9603 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9604 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9605 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9606 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9607 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9608 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9609 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9610 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9611 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9612 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9613 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9614 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9615 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9616 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9617 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9618 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9619 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9620 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9621 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9622 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9623 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9631 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9632 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9633 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9634 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9635 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9636 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9637 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9638 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9639 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14[packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15[packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌,则不包括最后胡的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9640 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9655 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9659 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9660 string pwd = 2; } "
},
{
	"uri": "/",
	"title": "架构总览",
	"tags": [],
	"description": "",
	"content": "架构图 graph TB A(客户端APP) CR(崇仁打盾) YH(宜黄红心5) P(公共服) PP(个人中心-帐号资料等) PC(社交-聊天/搜索/语音等) PG(游戏-列表/回放等) PM(游戏币-充值/消费等) PS(系统-公告/通知等) D(MYSQL/REDIS) C(运营人员) S(运营后台) A-- 游戏时长链tcp --\u003eCR A-- 游戏时长链tcp --\u003eYH A-- 长链tcp --\u003eP subgraph 重用 P-- 内嵌模块 --\u003ePP P-- 内嵌模块 --\u003ePC P-- 内嵌模块 --\u003ePG P-- 内嵌模块 --\u003ePM P-- 内嵌模块 --\u003ePS end C-- WEB --\u003eS CR-- 链接池 --\u003eD YH-- 链接池 --\u003eD PP-- 链接池 --\u003eD PC-- 链接池 --\u003eD PG-- 链接池 --\u003eD PM-- 链接池 --\u003eD PS-- 链接池 --\u003eD S-- 链接池 --\u003eD 三缺一大厅加入房间 sequenceDiagram participant C as 客户端 participant P as 公共服 participant R as Redis participant G as 游戏服 C -\u003e\u003e P: 三缺一大厅EventThreeOne P -\u003e\u003e R: 向game_gateway_playId_grade频道转发消息 R -\u003e\u003e G: 订阅频道,收到消息 G -\u003e\u003e R: 向public_gateway频道回包处理结果 R -\u003e\u003e P: 订阅频道,收到处理,转化为EventReturn P -\u003e\u003e C: 如果用户在本服务登陆,则回包给EventReturn 前后端交互图 sequenceDiagram participant C as 客户端 participant SP as 公共服 participant R as Redis participant M as Mysql participant SG as 游戏服 C -\u003e\u003e SP: 获取验证码 SP -\u003e\u003e R: 是否有未使用的验证码 alt 有未使用的验证码 R --\u003e\u003e SP: 返回验证码 else 没有未使用的验证码 SP -\u003e\u003e R: 生成验证码，保存 end SP -\u003e\u003e SP: 调用第三方短信接口 Note Over C: 用户接收验证码 C -\u003e\u003e SP: 使用验证码请求登录 SP -\u003e\u003e R: 获取验证码 SP -\u003e\u003e SP: 验证验证码 alt 验证成功 SP -\u003e\u003e R: 删除验证码 SP -\u003e\u003e M: 获取用户基本信息（用户不存在先插入用户信息） M --\u003e\u003e SP: 返回用户信息 SP -\u003e\u003e M: 获取用户的房间信息 M --\u003e\u003e SP: 返回用户的游戏房间信息 SP --\u003e\u003e C: 返回Token、房间等信息 else 验证失败 SP --\u003e\u003e C: 登录失败 end alt 用户在游戏房间内 C -\u003e\u003e SG: 登录游戏服务器 SG --\u003e\u003e C: 返回登录成功 C -\u003e\u003e SG: 用户进入房间继续游戏 else 用户没有在游戏房间内 C -\u003e\u003e C: 用户进入一级大厅，开始心跳请求 C -\u003e\u003e SP: 获取用户其他信息 SP --\u003e\u003e C: 返回用户其他信息 Note Over C: 等待用户的其他请求 end C -\u003e\u003e SP: 请游戏场次列表 SP -\u003e\u003e R: 获取游戏的场次列表 R --\u003e\u003e SP: 返回游戏的场次列表 SP --\u003e\u003e C: 返回游戏的场次列表 Note Over C: 展示一级大厅 C -\u003e\u003e SP: 进入某个场次 SP -\u003e\u003e+ R: 查询该场次信息 R --\u003e\u003e- SP: 返回该场次信息 SP -\u003e\u003e+ M: 获取该用户的资料 M --\u003e\u003e- SP: 返回该用户的资料 SP -\u003e\u003e SP: 判断用户的游戏币数 SP --\u003e\u003e C: 返回该场次的游戏服务器地址 C -\u003e\u003e SG: 用户登录到游戏服务器 SG -\u003e\u003e+ R: 用户Token查询用户的ID R --\u003e\u003e- SG: 返回用户的ID SG -\u003e\u003e+ M: 查询用户的基本信息 M --\u003e\u003e- SG: 返回用户的基本信息 SG -\u003e\u003e+ R: 获取用户的房间信息 R --\u003e\u003e- SG: 返回用户的房间信息 SG -\u003e\u003e R: 保存用户的经纬度 SG --\u003e\u003e C: 返回登录成功 SG --\u003e\u003e C: 推送二级大厅信息 C -\u003e\u003e SG: 用户进入某个房间（桌） SG --\u003e\u003e C: 推送房间信息 SG --\u003e\u003e C: 推送定位信息 SG --\u003e\u003e C: 如果已经准备好，推送游戏信息 SG --\u003e\u003e C: 如果人数满足，推送发牌信息 SG --\u003e\u003e C: 推送房间列表变化信息 游戏服登陆流程图 graph TD APP(客户端) room{是否在房间内?} lobby(进入大厅) game{是否在游戏中?} dismass{是否在解散中?} oldstatus{解散前是否游戏中?} run(游戏中) vote(推解散投票信息) APP -- 登陆 --\u003e room room -- 否,推房间列表 --\u003e lobby lobby -- 推房间变化 --\u003e lobby room -- 是,推房间信息 --\u003e dismass dismass -- 是 --\u003e oldstatus oldstatus -- 是,推游戏信息 --\u003e vote oldstatus -- 否 --\u003e vote dismass -- 否 --\u003e game game -- 是,推游戏信息 --\u003e run game -- 否,推玩家变化 --\u003e game run -- 推玩家/牌变化 --\u003e run 游戏服解散流程图 graph TD APP(客户端) ask(广播解散,提示投票) result{是否同意解散} agree{是否游戏中} refuse(发不解散通知,推游戏信息) disagree{是否在游戏中} APP -- 发起解散 --\u003e ask ask -- 玩家投票 --\u003e ask ask -- 统计投票,超时算同意 --\u003e result result -- 同意 --\u003e agree result -- 不同意 --\u003e refuse refuse --\u003e disagree disagree -- 是 --\u003e 推游戏信息 agree -- 否 --\u003e 发解散通知 agree -- 是 --\u003e 发小局结算 前后端tcp包结构 graph LR len[包体长度 2字节 ] event[事件id 2字节] seq[包序列号 2字节] pb[PB结构体] subgraph 数据包 小端 len--\u003eevent subgraph 包体内容 event--\u003eseq seq--\u003epb end end 先获取2Byte包体的长度,根据获取的长度获取包体的内容 包序列号 客户端每个tcp包都带上 服务端直接回包,值和发送包一样. 服务端主动发送的包seq都为0 扑克牌定义 牌ID 描述 03 – 15 方块3 - 方块2 23 – 35 梅花3 - 梅花2 43 – 55 红桃3 - 红桃2 63 – 75 黑桃3 - 黑桃2 83 小王 84 大王 85 癞子王 麻将牌定义 牌ID 描述 1 – 9 1万 - 9万 11 – 19 1筒 - 9筒 21 – 29 1条 - 9条 31 – 34 东南西北 41-43 中发白 游戏事件范围定义 事件ID 描述 9100~9199 公共服 9800~9899 打盾 10000~10099 宜黄红心5 10300~10399 丰城双剑 9900~9999 红中麻将 9600~9699 红中麻将2人场 10100~10199 宜黄麻将2人场 10200~10299 宜黄麻将 9400-9499 崇仁麻将2人场 9500-9599 崇仁麻将 9000-9099 乐安麻将2人场 9200-9299 乐安麻将 游戏ID 游戏ID 游戏名称 8600 打盾二人场 8700 跑得快二人场 8800 斗地主 8900 跑得快 9000 乐安麻将二人场 9100 公共服 9200 乐安麻将 9400 崇仁麻将2人场 9500 崇仁麻将 9600 红中麻将2人场 9800 打盾 9900 红中麻将 10000 宜黄红心5 10100 宜黄麻将2人场 10200 宜黄麻将 10300 丰城双剑 地区定义 地区ID 描述 9800 崇仁 10000 宜黄 9700 乐安 9900 东乡 9600 临川 10300 丰城 "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86/",
	"title": "乐安麻将",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9245 房间不在游戏中 9246 无权不出 9247 不出token错误 9248 必须出牌 9249 出牌token错误 9250 出牌错误 9251 无权出牌 9252 操作被取消 事件定义 从9200到9299 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端\n事件编号 事件名称 事件流向 描述 备注 9201 登录 c-\u0026gt;s 进入游戏要进行登录验证 9202 服务器返回 s-\u0026gt;c 服务器通用返回 9203 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9204 房间列表 c-\u0026gt;s 房间列表 9205 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9206 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9207 房间信息 c-\u0026gt;s 房间信息 9208 准备 c-\u0026gt;s 准备 9209 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9210 游戏信息 s-\u0026gt;c 游戏信息 9211 申请解散 c-\u0026gt;s 申请解散 9212 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9213 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9214 解散房间的结果 s-\u0026gt;c 解散房间的结果 9215 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9216 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9217 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9218 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9219 请求历史积分 c-\u0026gt;s 请求历史积分 9220 历史积分回包 s-\u0026gt;c 历史积分回包 9221 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9222 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9223 游戏信息 s-\u0026gt;c 刷新游戏信息 9231 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9232 系统发牌 s-\u0026gt;c 系统发牌 9233 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9234 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9235 请求出牌 c-\u0026gt;s 请求出牌 9236 广播出牌结果 s-\u0026gt;c 广播出牌结果 9237 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9238 摊牌 s-\u0026gt;c 摊牌 9239 小局结算 s-\u0026gt;c 小局结算 9240 回放游戏信息 s-\u0026gt;c 回放游戏信息 9255 回放 c-\u0026gt;s 回放,客户端要求 9259 创建VIP房间 c-\u0026gt;s 创建VIP房间 9260 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9201 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9202 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9203 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9204 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9205 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9206 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9207 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9208 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9209 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9210 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9211 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9212 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9213 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9214 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9215 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9216 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9217 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9218 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9219 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9220 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9221 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9222 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9223 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9231 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9232 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9233 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9234 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9235 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9236 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9237 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9238 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9239 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9240 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9255 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9259 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9260 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E4%B9%90%E5%AE%89%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/",
	"title": "乐安麻将二人场",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 9045 房间不在游戏中 9046 无权不出 9047 不出token错误 9048 必须出牌 9049 出牌token错误 9050 出牌错误 9051 无权出牌 9052 操作被取消 事件定义 从9000到9099 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 9001 登录 c-\u0026gt;s 进入游戏要进行登录验证 9002 服务器返回 s-\u0026gt;c 服务器通用返回 9003 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 9004 房间列表 c-\u0026gt;s 房间列表 9005 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 9006 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 9007 房间信息 c-\u0026gt;s 房间信息 9008 准备 c-\u0026gt;s 准备 9009 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 9010 游戏信息 s-\u0026gt;c 游戏信息 9011 申请解散 c-\u0026gt;s 申请解散 9012 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 9013 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 9014 解散房间的结果 s-\u0026gt;c 解散房间的结果 9015 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 9016 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 9017 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 9018 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 9019 请求历史积分 c-\u0026gt;s 请求历史积分 9020 历史积分回包 s-\u0026gt;c 历史积分回包 9021 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 9022 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 9023 游戏信息 s-\u0026gt;c 刷新游戏信息 9031 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 9032 系统发牌 s-\u0026gt;c 系统发牌 9033 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 9034 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 9035 请求出牌 c-\u0026gt;s 请求出牌 9036 广播出牌结果 s-\u0026gt;c 广播出牌结果 9037 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 9038 摊牌 s-\u0026gt;c 摊牌 9039 小局结算 s-\u0026gt;c 小局结算 9040 回放游戏信息 s-\u0026gt;c 回放游戏信息 9055 回放 c-\u0026gt;s 回放,客户端要求 9059 创建VIP房间 c-\u0026gt;s 创建VIP房间 9060 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 9001 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 9002 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 9003 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 9004 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 9005 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 9006 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 9007 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 9008 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 9009 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 9010 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 9011 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 9012 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 9013 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 9014 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 9015 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 9016 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 9017 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 9018 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 9019 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 9020 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 9021 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 9022 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 9023 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 9031 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 9032 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 9033 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 9034 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 9035 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 9036 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 9037 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 9038 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 9039 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14 [packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15 [packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16 [packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 9040 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 9055 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 9059 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 9060 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/mahjong-mask/",
	"title": "麻将番型表",
	"tags": [],
	"description": "",
	"content": "JSON格式\n番型 说明 3 平胡 4 碰碰胡 5 假字一色 6 真字一色 7 假清一色 8 真清一色 9 七对 10 十三烂 11 七星十三烂 12 碰碰胡清一色 13 碰碰胡字一色 14 七对清一色 15 七对字一色 16 四归一七对 17 八归一七对 18 十二归一七对 19 四归一平胡 20 八归一平胡 21 十二归一平胡 22 四归一假清一色 23 四归一真清一色 24 八归一假清一色 25 八归一真清一色 26 十二归一假清一色 27 十二归一真清一色 28 四归一假字一色 29 四归一真字一色 30 八归一假字一色 31 八归一真字一色 32 十二归一假字一色 33 十二归一真字一色 34 四归一七对清一色 35 八归一七对清一色 36 十二归一七对清一色 37 四归一七对字一色 38 八归一七对字一色 39 十二归一七对字一色 40 4红中 "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E9%BA%BB%E5%B0%86%E6%B5%81%E7%A8%8B%E5%9B%BE/",
	"title": "麻将流程图",
	"tags": [],
	"description": "",
	"content": "流程图 graph TD 准备 --\u003e开始[开始游戏] 开始--\u003e检查庄家胡[开局检查天胡] 检查庄家胡--\u003e|Y| 胡[胡牌] 检查庄家胡--\u003e|N| 出牌[出牌] 出牌--\u003e检查碰杠胡[检查碰/杠/胡] 检查碰杠胡--\u003e玩家选择碰杠胡过[玩家选择碰/杠/胡/过] 玩家选择碰杠胡过--\u003e|杠|杠[杠] 玩家选择碰杠胡过--\u003e|胡|胡[胡] 玩家选择碰杠胡过--\u003e|碰|碰[碰] 玩家选择碰杠胡过--\u003e|过|过[过] 过--\u003e下家摸牌[下家摸牌] 碰--\u003e出牌[出牌] 下家摸牌--\u003e出牌[出牌] 杠--\u003e出牌玩家摸牌[出牌玩家摸牌] 出牌玩家摸牌--\u003e出牌[出牌] 胡--\u003e结算[结算] 碰/杠,胡时,碰/杠先操作 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家3胡牌|USEOUT 可碰/杠,碰/杠先操作且胡过 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:过|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家2碰/杠|USEOUT 服务器--\u003e\u003e玩家2:广播玩家2碰/杠|USEOUT 服务器--\u003e\u003e玩家3:广播玩家2碰/杠|USEOUT 服务器--\u003e\u003e玩家4:广播玩家2碰/杠|USEOUT 碰/杠 /胡都选择过 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 玩家2-\u003e\u003e服务器:过|ASKOUT 服务器--\u003e\u003e玩家2:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:过|ASKOUT 服务器--\u003e\u003e玩家2:给玩家2发牌(提示出牌)|HINTOUT 服务器--\u003e\u003e玩家1:等待玩家2出牌|WAITOUT 服务器--\u003e\u003e玩家3:等待玩家2出牌|WAITOUT 服务器--\u003e\u003e玩家4:等待玩家2出牌|WAITOUT 碰/杠,胡时,胡先操作 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:提示等待WAITOUT 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家3胡牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家3胡牌|USEOUT 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:错误码|RETURN 两个玩家可以胡,一个玩家可以碰/杠 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:提示胡|HINTOUT 玩家4-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家4:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家2:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家3:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家4:广播玩家3,4胡牌|MultiUseOut 两个玩家可以胡,一个玩家可以碰 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:提示胡|HINTOUT 玩家4-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家4:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家2:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家3:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家4:广播玩家3,4胡牌|MultiUseOut 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:错误码 两个胡一个碰/杠 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1出牌|USEOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示碰/杠|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:提示胡|HINTOUT 玩家2-\u003e\u003e服务器:碰/杠|ASKOUT 服务器--\u003e\u003e玩家2:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家4-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家4:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家2:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家3:广播玩家3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家4:广播玩家3,4胡牌|PBMultiUseOut 补杠 sequenceDiagram 玩家1-\u003e\u003e服务器:补杠|ASKOUT 服务器--\u003e\u003e玩家2:提示胡|HINTOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家3:等待操作|WAITOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 玩家2-\u003e\u003e服务器:过|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1补杠成功|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1补杠成功|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1补杠成功|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1补杠成功|USEOUT 抢杠胡 sequenceDiagram 玩家1-\u003e\u003e服务器:补杠|ASKOUT 服务器--\u003e\u003e玩家2:提示胡|HINTOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家3:等待操作|WAITOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 玩家2-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家2抢杠胡|USEOUT 服务器--\u003e\u003e玩家2:广播玩家2抢杠胡|USEOUT 服务器--\u003e\u003e玩家3:广播玩家2抢杠胡|USEOUT 服务器--\u003e\u003e玩家4:广播玩家2抢杠胡|USEOUT 杠上花 sequenceDiagram 玩家1-\u003e\u003e服务器:杠|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1杠|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1杠|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1杠|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1杠|USEOUT 服务器--\u003e\u003e玩家1:给玩家1发牌(+出牌/胡牌)|HINTOUT 服务器--\u003e\u003e玩家2:等待操作|WAITOUT 服务器--\u003e\u003e玩家3:等待操作|WAITOUT 服务器--\u003e\u003e玩家4:等待操作|WAITOUT 玩家1-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家1杠上花|USEOUT 服务器--\u003e\u003e玩家2:广播玩家1杠上花|USEOUT 服务器--\u003e\u003e玩家3:广播玩家1杠上花|USEOUT 服务器--\u003e\u003e玩家4:广播玩家1杠上花|USEOUT 一炮三响 sequenceDiagram 玩家1-\u003e\u003e服务器:玩家1出牌|ASKOUT 服务器--\u003e\u003e玩家1:等待操作|WAITOUT 服务器--\u003e\u003e玩家2:提示胡|HINTOUT 服务器--\u003e\u003e玩家3:提示胡|HINTOUT 服务器--\u003e\u003e玩家4:提示胡|HINTOUT 玩家4-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家4:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家3-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家3:⚠️继续等待操作|WAITOUT(isKeep=true) 玩家2-\u003e\u003e服务器:胡|ASKOUT 服务器--\u003e\u003e玩家1:广播玩家2,3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家2:广播玩家2,3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家3:广播玩家2,3,4胡牌|MultiUseOut 服务器--\u003e\u003e玩家4:广播玩家2,3,4胡牌|MultiUseOut "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E9%BA%BB%E5%B0%86%E9%80%BB%E8%BE%91%E5%9B%BE/",
	"title": "麻将逻辑图",
	"tags": [],
	"description": "",
	"content": "出牌 graph TD; 出牌--\u003e移除手牌[手牌中移除,添加出牌池]; 移除手牌--\u003e 广播出牌; 广播出牌--\u003e|清除所有玩家的WAITOUT/HINTOUT|其他玩家{其他玩家是否有\n碰/杠/胡}; 其他玩家--\u003e|Y|操作类型[生成HINTOUT/WAITOUT]; 操作类型--\u003e|碰|碰[发送HINTOUT]; 操作类型--\u003e|杠|杠[发送HINTOUT]; 操作类型--\u003e|胡|胡[发送HINTOUT]; 操作类型--\u003e|等待|等待[发送WAITOUT]; 其他玩家--\u003e|N|给下个玩家发牌; 碰 graph TD; 碰--\u003e出牌池减少被碰的牌[被碰玩家牌池移除被碰牌]; 出牌池减少被碰的牌--\u003e手牌中移除玩家碰的牌[碰牌玩家手牌移除对子]; 手牌中移除玩家碰的牌--\u003e|添加碰牌到碰牌列表|增加碰记录[碰牌玩家增加碰记录]; 增加碰记录--\u003e|清除所有玩家的HINTOUT/WAITOUT|广播碰成功[广播碰成功]; 广播碰成功--\u003e检查暗杠{检查是否可以暗杠}; 检查暗杠--\u003e生成消息[根据检查结果生成HINTOUT]; 生成消息--\u003e|杠|杠[发送HINTOUT] 生成消息--\u003e|出牌|出牌[发送HINTOUT] 杠 graph TD; 杠--\u003e判断杠类型{判断杠类型}; 判断杠类型--\u003e|暗杠|移除暗杠牌[移除玩家手中暗杠的四张牌]; 移除暗杠牌--\u003e添加到杠牌列表; 判断杠类型--\u003e|补杠|去除碰记录[删除碰记录,移除碰列表中的碰牌,保留被碰玩家的座位信息]; 去除碰记录--\u003e添加到杠牌列表; 判断杠类型--\u003e|直杠|出牌池移除牌[被杠玩家出牌池移除被杠牌,杠牌玩家移除三张杠牌]; 出牌池移除牌--\u003e添加到杠牌列表; 添加到杠牌列表--\u003e增加杠记录; 增加杠记录--\u003e|清除所有玩家的HINTOUT/WAITOUT|广播杠成功; 广播杠成功--\u003e发牌; 胡 graph TD; 胡--\u003e|清除所有玩家的HINTOUT/WAITOUT|胡类型{判断胡类型}; 胡类型--\u003e放炮胡; 放炮胡--\u003e移除放炮的牌[移动放炮玩家的放炮牌至胡牌玩家手牌]; 移除放炮的牌--\u003e广播胡牌[广播胡牌USEOUT]; 胡类型--\u003e抢杠胡; 胡类型--\u003e自摸; 抢杠胡--\u003e移除被抢杠的牌[移动被抢杠玩家的被抢杠的牌至胡牌玩家手牌] ; 移除被抢杠的牌--\u003e广播胡牌; 自摸--\u003e 广播胡牌[广播胡牌USEOUT]; 过 graph TD; 过--\u003e|清除所有玩家的HINTOUT/WAITOUT|给下个玩家发牌[给出牌玩家的下一个玩家发牌]; 发牌 graph TD; 发牌[发牌给玩家]--\u003e牌墙减少牌; 牌墙减少牌--\u003e增加手牌[增加玩家的手牌]; 增加手牌 --\u003e|清除所有玩家的HINTOUT/WAITOUT|检查杠/胡; 检查杠/胡--\u003e胡/杠[根据检查结果生成HINTOUT]; 胡/杠--\u003e|胡|发送胡[发送HINTOUT]; 胡/杠--\u003e|杠|发送杠[发送HINTOUT]; 胡/杠--\u003e|出牌|发送出牌[发送HINTOUT]; 胡/杠--\u003e|等待|发送等待[给其他没有HINTOUT玩家发送WAITOUT] ; 多人有HINTOUT,玩家选择碰/杠胡/过 graph TD; 多人[碰/杠/胡/过]--\u003e其他玩家(判断其他玩家是否有出牌提示); 其他玩家--\u003e|Y|暂存玩家操作; 暂存玩家操作--\u003e回复继续等待[回复继续等待WAITOUT\u0026\u0026isKeep=true]; 其他玩家--\u003e|N|判断暂存(判断是否有暂存操作); 判断暂存--\u003e|Y|暂存操作[暂存玩家操作]; 暂存操作--\u003e查暂存[从暂存列表中按'胡\u003e杠\u003e碰\u003e过'查找出可以执行的操作]; 查暂存--\u003e结果[根据查找结果确定最后执行的流程]; 结果--\u003e|胡|执行胡[参考单人胡流程]; 结果--\u003e|杠|执行杠[参考单人杠流程]; 结果--\u003e|碰|执行碰[参考单人碰流程]; 结果--\u003e|过|执行过[参考单人过流程]; 判断暂存--\u003e|N|单人[参考单人流程]; "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E9%BA%BB%E5%B0%86%E5%8D%8F%E8%AE%AE%E5%9B%BE/",
	"title": "麻将协议图",
	"tags": [],
	"description": "",
	"content": "玩家发AskOut graph LR; 玩家AskOut -- IsForce=true --\u003e强制出牌; 玩家AskOut -- IsForce=false --\u003e非强制出牌; 强制出牌 -- action=0 --\u003e出一张牌; 强制出牌 -- action=2 --\u003e暗补杠[暗杠补杠]; 强制出牌 -- action=3 --\u003e主动胡[天胡自模杠上花]; 强制出牌 -- action=5 --\u003e取消杠/胡; 非强制出牌 -- action=1 --\u003e碰; 非强制出牌 -- action=2 --\u003e直杠; 非强制出牌 -- action=3 --\u003e被动胡[地胡点炮胡抢杠胡]; 非强制出牌 -- action=4 --\u003e过[玩家不出]; 系统派牌的出牌HINTOUT graph LR; 出牌[系统派牌的出牌HINTOUT] --\u003e|IsForce|必出[必须为true,客户端提示玩家必须从出牌/杠/胡中选择一个操作,可以取消杠/胡]; 出牌--\u003e|CanHu|可胡[若CanHu的值为true则填写下一步内容]; 可胡--\u003eHuPai[HuPai:胡的牌HuMask:胡牌类型HuTypeNum:胡牌番型]; 出牌--\u003e|CanGang|可杠[若CanGang的值为true则填写下一步内容]; 可杠--\u003e杠牌表[GangList手牌中所有可杠牌的列表]; 出牌--\u003e|CanPeng|碰[必须为false]; 碰--\u003e碰牌[Pengpai:无效]; 出牌--\u003e|HasAddPai|派牌[必须为true]; 派牌--\u003e派的牌[AddPai:必须为有效的系统派牌]; 出牌--\u003e|CursorSeatId|指向[牌桌风向标:必须为活动玩家的座位号,这里为被派牌玩家座位号]; 出牌--\u003e|QiangNum|墙牌[必须填,用于桌面上展示派牌后牌墙剩余的牌数量]; 出牌--\u003e|SeatId|座位号[必填,用于回放使用这里为被派牌玩家座位号]; 出牌--\u003e|CanOut|是否最后一张牌[最后一张派牌流局时可以为false否则派牌后必须为true]; 碰牌后的出牌HINTOUT graph LR; 出牌[碰牌后的出牌HINTOUT] --\u003e|IsForce|必出[必须为true,客户端提示玩家必须从出牌/杠中选择一个操作,可以取消杠]; 出牌--\u003e|CanGang|杠[CanGang的值为true则填写下一步内容]; 杠--\u003e杠list[GangList杠牌列表,所有可以杠的牌]; 出牌--\u003e|CanOut|CanOut[必须为true,碰完后一定可以出牌]; 出牌--\u003e|CursorSeatId|CursorSeatId[必填,牌桌风向标:指向活动玩家这里为当前出牌玩家座位号]; 出牌--\u003e|QiangNum|QiangNum[必填,用于桌面上展示剩余的牌]; 出牌--\u003e|SeatId|SeatId[必填,回放使用,这里为当前出牌玩家的座位号]; 出牌--\u003e|CanPeng|碰[必须为false]; 碰--\u003e碰牌[Pengpai:无效]; 出牌--\u003e|CanHu|胡[必须为false]; 胡--\u003eHuPai[HuPai:无效HuMask:无效HuTypeNum:无效]; 出牌--\u003e|HasAddPai|派牌[必须为false]; 派牌--\u003eAddPai[AddPai:无效]; 碰/杠/(点炮)胡HINTOUT graph LR; 胡HINTOUT[碰/杠/胡HINTOUT]--\u003e|IsForce|必出[必须为false,其他玩家出牌后才会出现碰杠胡]; 胡HINTOUT--\u003e|CanPeng|碰[若CanPeng的值为true则填写下一步内容]; 碰--\u003e碰牌[Pengpai:可碰的牌即出牌玩家出的牌]; 胡HINTOUT--\u003e|CanGang|杠[若CanGang的值为true则填写下一步内容]; 杠--\u003e杠list[GangList:可以杠的牌]; 胡HINTOUT --\u003e|CanHu|胡[CanHu的值为true则填写下一步内容]; 胡--\u003e胡牌[HuPai:胡的牌HuMask:胡类型HuTypeNum:胡牌番型]; 胡HINTOUT --\u003e |QiangNum|QiangNum[必填,用于桌面上展示剩余的牌数量]; 胡HINTOUT --\u003e |CursorSeatId| CursorSeatId[必填,牌桌风向标:指向活动玩家这里为出牌玩家座位号]; 胡HINTOUT--\u003e|HasAddPai|派牌[必须为false]; 派牌--\u003eAddPai[AddPai:无效]; 胡HINTOUT --\u003e |SeatId|SeatId[必填,回放使用,当前可以碰/杠/胡的玩家的座位号]; 胡HINTOUT--\u003e|CanOut|出牌[必须为false]; 等待WAITOUT graph LR; 等待[等待WAITOUT] --\u003e |CursorSeatId|出牌玩家[必填,风向标指向出牌的玩家]; 等待--\u003e|HasAddPai|派牌[是否是有系统派牌,有则填写下一步内容]; 派牌--\u003e派牌玩家[AddPaiSeatId:被派牌玩家的座位号]; 等待--\u003e|QiangNum|牌墙[必填,用于桌面展示剩余牌的数量]; 等待--\u003e|IsKeep|IsKeep[玩家做出一个操作后,还需要等待其他玩家操作,则IsKeep=true]; 发牌/同步当前桌子手牌信息 graph LR; 发牌[发牌PBAssignPai]--\u003e|PaiList|手牌[手牌不能为空,不包含已经杠/碰的牌,若是开局后系统发牌则一定为13张]; 发牌--\u003e|Hint|出牌[Hint不为空,则为当前玩家出牌,与Wait互斥]; 发牌--\u003e|Wait|等待[Wait不为空,则等待庄家出牌,与Hint互斥]; 发牌--\u003e|leftPaiNum|左边牌数[给每个玩家发完牌后,起摸点左边剩余的牌,通过骰子获得]; 发牌--\u003e|rightPaiNum|右边牌数[给每个玩家发完牌后,起摸点右边剩余的牌,通过骰子获得]; 发牌--\u003e|syncNumList|牌数量[必填,同步每个玩家的手牌数量,展示其他玩家的牌数量]; 发牌--\u003e|zhuangSeat|庄家[必填,庄家座位号,标识庄家]; 小局结算 graph LR; 结算[小局结算PBSmallSettlement]--\u003e|ID|ID[当前游戏的房间号]; 结算--\u003e|status|房间状态[结算时的房间状态,小局结算时状态为小局结束]; 结算--\u003e|now|当前局数[进行小局结算时的当前局数]; 结算--\u003e|next|下局局数[下局局数,已结束则为0客户端判断是否继续准备]; 结算--\u003e|total|总局数[展示总局数]; 结算--\u003e|name|玩法名称[当前游戏的名称]; 结算--\u003e|doc|玩法描述[游戏玩法的具体描述]; 结算--\u003e|time|时间[展示结束时的时间]; 结算--\u003e|baseScore|房间底分[展示当前游戏的底分] 结算--\u003e|overReason|结束原因[结束原因:解散/结束/局数打满/玩家退出等,用于展示相应提示或动画] 结算--\u003e|overDoc|结束说明[结束文字说明:玩家发起解散/超过局数解散/玩家退出等] 结算--\u003e|dataValid|数据是否有效[数据是否有效,结算前状态不是游戏中,则数据无效] 结算--\u003e|isFlow|是否流局 结算--\u003e|prizeHorseList|奖马[奖马:摸到的奖马牌及是否是马] 结算--\u003e|players|玩家情况[展示每个玩家的数据] 结算的players玩家数据 graph LR; 玩家[players玩家数据]--\u003e|userId|id[玩家ID,用于展示玩家的信息] 玩家--\u003e|NickName|NickName[玩家昵称,用于展示玩家的信息] 玩家--\u003e|WinScore|WinScore[展示本局输赢分数赢为正数,输为负数] 玩家--\u003e|IsBanker|IsBanker[标识是否是庄家] 玩家--\u003e|IsPao|IsPao[标识是否是放炮] 玩家--\u003e|IsHu|IsHu[如果这个玩家是胡牌玩家则填写下一步内容] IsHu--\u003eHuType[HuPai:胡的牌HuType:展示胡牌类型HuTypeNum:胡牌番型] WinScore--\u003eHuScore[HuScore:总胡牌分数GangScore:总的杠分数PrizeHorseScore: 总奖/杀马分数] 玩家--\u003e|HandPaiList|HandPaiList[玩家的手牌] 玩家--\u003e|GangList|GangList[展示玩家所有杠的牌列表] 玩家--\u003e|PengList|PengList[展示玩家所有碰的牌列表] "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E7%89%8C%E5%9E%8B%E6%B5%8B%E8%AF%95/",
	"title": "牌型测试",
	"tags": [],
	"description": "",
	"content": "宜黄麻将/崇仁麻将 抢杠胡 sequenceDiagram participant 玩家一 participant 玩家二 participant 玩家三 participant 玩家四 Note\tover 玩家一,玩家四:补牌为：红中--\u003e一万--\u003e红中--\u003e红中--\u003e发财--\u003e一万(抢一万) 玩家一-\u003e\u003e玩家二:出红中 玩家二-\u003e\u003e玩家一:过胡,摸一万,出一万,玩家一可碰 玩家一-\u003e\u003e玩家二:碰一万,出八万 玩家二-\u003e\u003e玩家三:摸红中,过胡,出一张牌 玩家三-\u003e\u003e玩家四:摸红中,出一张牌 玩家四-\u003e\u003e玩家一:摸发财,出发财 玩家一-\u003e\u003e玩家三:摸一万,选择杠,玩家三可以胡 玩家一-\u003e\u003e玩家四:玩家四可以胡 玩家三-\u003e\u003e玩家一:胡 玩家四-\u003e\u003e玩家一:胡 宜黄/崇仁麻将麻将2人场抢杠胡 sequenceDiagram participant 玩家一 participant 玩家二 Note\tover 玩家一,玩家二:补牌为：五筒-\u003e四筒-\u003e五筒 玩家一-\u003e\u003e玩家二:出五筒,玩家二可以碰 玩家二--\u003e\u003e玩家一:碰,出白板 玩家一-\u003e\u003e玩家二:摸四筒,出白板 玩家二--\u003e\u003e玩家一:摸五筒,补杠,玩家一可胡 玩家一-\u003e\u003e玩家二:抢杠胡 崇仁麻将点炮胡清一色 sequenceDiagram participant 玩家一 participant 玩家二 participant 玩家三 participant 玩家四 Note\tover 玩家一,玩家四:补牌为：一条-\u003e二万-\u003e五条 玩家一-\u003e\u003e玩家三:摸一条出一条,玩家三可以碰 玩家三-\u003e\u003e玩家一:碰一条,出红中,玩家一可以碰 玩家一-\u003e\u003e玩家二:碰红中,出五万 玩家二-\u003e\u003e玩家四:摸二万出二万,玩家四可碰 玩家四-\u003e\u003e玩家三:碰二万,出九条,玩家三可胡 玩家三-\u003e\u003e玩家四:胡九条(选择过胡可以测试假清一色) 玩家三-\u003e\u003e玩家一:选择过胡 玩家一-\u003e\u003e玩家三:摸5条出五条,玩家三可胡 崇仁麻将点炮胡字一色 sequenceDiagram participant 玩家一 participant 玩家二 participant 玩家三 participant 玩家四 Note\tover 玩家一,玩家四:补牌为：红中-\u003e二万-\u003e白板 玩家一-\u003e\u003e玩家三:摸红中出红中,玩家三可以碰 玩家三-\u003e\u003e玩家一:碰红中,出九筒,玩家一可以碰 玩家一-\u003e\u003e玩家二:碰九筒,出五万 玩家二-\u003e\u003e玩家四:摸二万出二万,玩家四可碰 玩家四-\u003e\u003e玩家三:碰二万,出南风,玩家三可胡 玩家三-\u003e\u003e玩家四:胡(选择过胡可以测试假字一色) "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E8%B7%91%E5%BE%97%E5%BF%AB/",
	"title": "跑得快",
	"tags": [],
	"description": "",
	"content": "错误码 从8900到8999\n错误码 描述 8901 success 8902 数据反序化失败 8903 地区玩法错误 8904 未知事件 8905 没有该用户 8906 用户未登录 8907 用户验证失败 8908 用户重复登录 8909 已加入其他游戏 8910 已登陆其他服务器 8912 加入房间失败 8913 房间不存在 8914 房间已经满人 8915 用户已在房间中 8916 该用户没有在任何房间 8920 重复申请解散 8921 房间不在解散中 8922 获取距离失败 8923 退出房间失败 8924 房间不在准备中 8927 重复解散投票 8928 用户不在当前房间 8929 房间已开始游戏 8930 坐下失败,游戏币不足 8931 没有空房间 8932 重复准备 8933 用户已在其他设备登陆 8934 用户信息读取失败 8935 准备失败,游戏币不足 8936 创建VIP房间失败,游戏币不足 8937 VIP房间, 加入失败 8938 加入VIP房间失败, 密码错误 8939 非VIP房间 8940 无权包庄 8941 房间不在选择包庄中 8945 房间不在游戏中 8946 无权不出 8947 不出token错误 8948 必须出牌 8949 出牌token错误 8950 出牌不符合规则 8951 无权出牌 8952 你没有处于托管中 8953 数据库操作失败 8954 取消托管的次数已经用光 8955 你处于托管中 8961 包庄游戏币数最低为当前底分60倍 事件定义 从8900到8999 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 s-\u0026gt;m 服务器端广播到客户端\n事件编号 事件名称 事件流向 是否返回 描述 8901 登录 c-\u0026gt;s true 8902 服务器返回 s-\u0026gt;c 服务器返回,包括成功和异常 8903 心跳包 c-\u0026gt;s true 服务器回空包 8904 房间列表 s-\u0026gt;m 广播给大厅内但不在房间的玩家 8905 房间变化 s-\u0026gt;m 广播给大厅内但不在房间的玩家 8906 加入房间 c-\u0026gt;s true 快速开始-不用填房间号 8907 房间信息 s-\u0026gt;c 加入房间推送或在房间内掉线回来推送 8908 准备 c-\u0026gt;s 玩家准备及取消准备 8909 玩家变化 s-\u0026gt;m 加入,离开,上线,掉线,准备,取消准备都广播房间内玩家 8910 游戏信息 s-\u0026gt;c 开始游戏推送或游戏内掉线回来推送 8911 申请解散 c-\u0026gt;s 如果房间未开始,当作退出房间处理 8912 提示玩家投票 s-\u0026gt;m 广播给房间内玩家 8913 玩家投票 c-\u0026gt;s 玩家是否同意解散 8914 广播解散结果 s-\u0026gt;m 广播给房间内玩家 8915 请求LBS c-\u0026gt;s 8916 回复LBS s-\u0026gt;c 8917 请求退出房间 c-\u0026gt;s true 服务器返回 8918 顶号 s-\u0026gt;c 同个用户只能一个连接,新的顶替旧的 8919 请求历史积分 c-\u0026gt;s 8920 回复历史积分 s-\u0026gt;c 8921 近距离提示 m 8922 聊天 m 客户端和服务器广播同一个命令字/PB结构,服务器不做任何处理 8923 游戏信息 s-\u0026gt;c 刷新游戏信息 8931 系统发牌 s-\u0026gt;m 广播给房间内玩家,每个人信息不同 8932 提示包庄 s-\u0026gt;m 让玩家选择是否包庄 8933 玩家是否包庄 c-\u0026gt;s 玩家是否包庄,出错回包,成功不回 8934 广播是否包庄 s-\u0026gt;m 通知包庄 8936 提示出牌 s-\u0026gt;m 通知玩家出牌 8937 玩家出牌 c-\u0026gt;s 玩家出牌,出错时回包,成功不回 8938 广播出牌 s-\u0026gt;m 广播给房间内玩家,玩家出牌 8939 广播清桌 s-\u0026gt;m 广播给房间内玩家,通知清桌 8940 摊牌 s-\u0026gt;m 广播给房间内玩家 8941 小局结算 s-\u0026gt;m 广播给房间内玩家 8942 回放游戏信息 8955 回放 8956 广播用户进入托管模式 s-\u0026gt;m 8957 取消托管模式 c-\u0026gt;s true 8958 广播托管模式 s-\u0026gt;m 8959 创建VIP房间 c-\u0026gt;s true 8960 加入VIP房间 c-\u0026gt;s true 协议PB结构 玩家结构 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家信息 message EventPlayerInfo { //用户ID int32 userId = 1; //在线状态 true -- 在线 false -- 离线 bool onlineStatus = 2; //准备状态 true --准备 false --未准备 bool readyStatus = 3; //游戏币数,(精确到分) int64 coins = 4; //座位ID 0，1，2，3 int32 seatId = 5; //昵称 string nickName = 6; //头像url string headUrl = 7; //用户IP string ip = 8; // 性别 0-没有设置,1--男 2--女 int32 sex = 9; //总积分 int32 totalJiFen = 10; //登录地址 string loginAddress = 11; } 创建VIP房间 message EventCreateVIPRoom { // IRequest 8959 } 加入VIP房间 message EventJoinVIPRoom { // IRequest 8960 string pwd = 2; } 广播托管模式 // 取消托管成功 message EventCancelEntrustDone { // IResponse 8958 // 取消托管用户座位号 int32 seat = 1; } 取消托管模式 // 取消托管 message EventCancelEntrust { // IRequest 8957 } 广播用户进入托管模式 // 广播用户进入托管 message EventInEntrust { // IResponse 8956 // 进入托管用户的座位号 int32 seat = 1; // 还有多少次可以取消托管 int32 count = 2; } 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 8901 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 8902 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 8903 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; //房间列表 message EventRoomList { // IResponse 8904 // 房间列表 repeated EventRoomInfo items = 1[packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; // 大厅内有房间内变化,广播所有大厅里不在房间内玩家 message EventUseRoomChange { // IResponse 8905 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 快速开始-不用填房间号\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { //IRequest 8906 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; //房间信息 message EventRoomInfo { //IResponse 8907 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中,5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7[packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 8908 //true-准备 false--取消准备 bool isReady = 1; } 玩家变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 8909 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4[packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;use_out.proto\u0026#34;; import \u0026#34;assign_pai.proto\u0026#34;; message PBBombType { repeated int32 bts = 1[packed = false]; } message PBGameInfo { // IResponse 8910 // 当前是否包庄 bool isBaoZhuang = 1; // 是否选择包庄中 bool isChoiceBaoZhuang = 2; // 选择包庄剩余时间，还剩余多少秒考虑时间 int32 remainBaoZhuangTime = 3; // 当前选择包庄座位号 int32 choiceSeatId = 4; // 对家用户id,包庄才有效 int32 oppositeUserId = 5; // 出牌token string outPaiToken = 6; // 庄家用户id int32 bankerUserId = 7; // 庄家座位id int32 bankerSeatId = 8; // 当前桌牌(按出牌顺序) repeated PBUseOut desktopPai = 9 [packed = false]; // 当前出牌座位号 int32 curOutPaiSeat = 10; // 当前出牌玩家的牌是否大的起上家 bool isCanPlayLast =11; // 当前手牌 repeated int32 handPai = 12 [packed = false]; // 每个玩家剩余张数(座位号为下标),小于等于5张才有效 repeated int32 restNum = 13 [packed = false]; // 每个玩家炸弹输赢分(座位号为下标) repeated int32 bombScore = 14 [packed = false]; // 能否出牌 bool canOutPai = 15; // 是否必须出牌 bool mustOutPai = 16; // 出牌时的剩余时间 int32 remainOutTime = 17; // 是否处于托管中 repeated bool isEntrust = 18 [packed = false]; // 还有几次取消托管的机会 int32 cancelEntrustCount = 19; // 每个玩家出完顺序(座位号为下标),0-没出完,1-出完 repeated int32 overOrder = 20 [packed = false]; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { } 提示玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家的投票情况 message EventPlayerVote { int32 userId = 1; string nickName = 2; //投票结果 0--未投票 1--同意 2--拒绝 int32 vote = 3; } // 提示玩家投票及广播解散意见,玩家如果没有投票,则提示投票,否则仅显示 message EventQueryDismassRoom { // IResponse 8912 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3[packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { //true--同意 false--拒绝 bool isAgree = 1; } 广播解散结果 syntax = \u0026#34;proto3\u0026#34;; package event; //解散房间的结果 message EventNoticeDismassRoom { // IResponse 8914 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 请求LBS syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 8915 } 回复LBS syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseGeoItem { //起始用户ID int32 srcUid = 1; //结束用户ID int32 destUid = 2; //用户之间距离 string distance = 3; //用户之间距离,数值表示,单位(米) int32 gap = 4; } //玩家间距离回包 message EventUseGeo { // IResponse 8916 // 用户ID列表 repeated int32 uids = 1[packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2[packed = false]; } 请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { } 顶号 syntax = \u0026#34;proto3\u0026#34;; package event; //同个用户新登陆踢出旧登陆 message EventKickOut { // IResponse 8918 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 8919 } 回复历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; message EventHistoryScoreItem { // 用户ID int32 userId = 1; // 下标-局数,值-积分 repeated int32 scores = 2[packed = false]; } // 历史积分回包 message EventUseHistoryScore { // IResponse 8920 repeated EventHistoryScoreItem items = 1[packed = false]; } 近距离提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 8921 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 8922 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 8923 } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAssignPai { // IResponse 8931 // 系统开始发的手牌 repeated int32 pai = 1[packed = false]; } 提示包庄 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintBaoZhuang { // IResponse 8932 // 是否能选择包庄 bool canBaoZhuang = 1; // 剩余多少秒的考虑时间 int32 countdown = 2; // 当前庄家座位号 int32 seatId = 3; // 当前庄家用户id int32 userId = 4; // 黑桃三先叫牌是否有效 bool isSpade3Valid = 5; // 首局有黑桃三玩家座位号 int32 seatIdBySpade3 = 6; } 玩家是否包庄 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskBaoZhuang { // IRequest 8933 // 是否包庄 bool isBaoZhuang = 1; } 广播是否包庄 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;assign_pai.proto\u0026#34;; //包庄回复 message PBUseBaoZhuang { // IResponse 8934 //座位号 int32 seatId = 1; //玩家ID int32 userId = 2; // 是否包庄 bool isBaoZhuang = 3; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintOut { // IResponse 8936 // 出牌token string token = 1; // 当前出牌者座位号 int32 seatId = 2; // 是否必须出牌 bool isForce = 3; // 倒计时 int32 countdown = 4; // 黑桃三先出牌是否有效 bool isSpade3Valid = 5; // 首局有黑桃三玩家座位号 int32 seatIdBySpade3 = 6; // 是否有打得起上家的牌 true-打得起 false-打不起 bool isCanPlay = 7; // 下家是否报单 bool nextReplySingle = 8; // 是否赢家出 bool isWinnerFirstOut =9; // 是否包庄 bool isBaoZhuang =10; } 玩家出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 8937 // 出牌token,处理重复出牌 string token=1; // 此次出的牌 repeated int32 pai = 2[packed = false]; // 是否不出 bool isSkip = 3; } 广播出牌 扑克牌型掩码文档\nsyntax = \u0026#34;proto3\u0026#34;; package event; message PBUseOut { // IResponse 8938 // 出牌玩家座位号 int32 seatId = 1; // 出牌玩家用户id int32 userId = 2; // 出的牌 repeated int32 pai = 3 [packed = false]; // 牌分类,1-单张,2-对子,3-3张,4-3带1,5-3带2, // 6-顺子,7-连对,8-飞机，10--4炸,1019--4带3， int32 paiClass = 4; // 牌掩码,例如单张3,3张3带2,见文档 http://192.168.2.160:1313/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/poker-mask.zh/ int32 paiMask = 5; // 出完位置,0-没出完,1-出完 int32 overOrder = 6; // 按座位号记录每个玩家此次炸弹输赢分,赢分为正数,输分为负数 repeated int32 bombScore = 7 [packed = false]; // 第几轮 int32 roundIndex = 8; // 同一轮第几次 int32 roundSerial = 9; // 是否不出 bool isSkip = 10; // 剩余张数,等于1张才报单 int32 restNum = 11; } 广播清桌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBClearDesktop { // IResponse 8939 // 大牌的玩家座位号 int32 seatId =1; // 大牌的玩家用户id int32 userId =2; // 第几轮 int32 roundIndex = 3; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; //用户的手牌 message PBTanPaiItem { repeated PBTanPaiItem items = 1 [packed = false]; // 是否是解散 bool isNormalOver = 2; // 是否包庄 bool isBaoZhuagn = 3; // 是否是庄家赢 bool isBankerWin = 4; } //摊牌 message PBTanPai { // IResponse 8940 repeated PBTanPaiItem items = 1 [packed = false]; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; message PBSmallMeta { //玩家ID int32 userId = 1; //玩家昵称 string nickName = 2; //是否包庄 bool isBaoZhuang = 3; //当前总游戏币(精确到分) int64 totalCoins = 4; //此局输赢分(牌局结束输赢+炸弹),赢分为正数,输分为负数 int32 winScore = 5; //此局炸弹输赢分,赢分为正数,输分为负数 int32 bombScore = 6; // 余牌分数 int32 paiScore =7; //出完顺序,0-没出完,1-出完 int32 overOrder = 8; //是否庄家(此局第一个出牌人) bool isBanker = 9; //牌局结束输赢分,赢分为正数,输分为负数 int32 cardScore = 10; //此局输赢游戏币数,单位：分,赢为正数,输为负数 int32 winCoins = 11; // 是否报单 bool isVocalizeOdd = 12; // 玩家结束时的状态 0-正常结束 5-破庄 6-关门 8-包庄成功 int32 overStatus =13; // 结束时余牌数量 int32 paiNum = 14; } message PBSmallSettlement { // IResponse 8941 //房间号 int32 id = 1; //房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; //当前局数 int32 now = 3; //下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; //总局数 int32 total = 5; //玩法名称 string name = 6; //玩法描述 string doc = 7; //时间 string time = 8; //各玩家的情况,座位号为下标 repeated PBSmallMeta players = 9 [packed = false]; //是否包庄 bool isBaoZhuang = 10; //为true表示数据(是否包庄，是否庄家,出完顺序)有效,否则无效 bool dataValid = 11; //房间底分 int32 baseScore = 12; //结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 5-解散成功 int32 overReason = 13; //结束文字说明 string overDoc = 14; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 8942 // 是否包庄 bool isBaoZhuang = 1; //庄家座位ID int32 BankerSeatId = 2; //庄家用户ID int32 BankerUserId = 3; // 系统发的手牌,按座位号为下标 repeated PBAssignPai handPai = 4 [packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; message PBReplayCell { //对应的事件ID int32 eventId = 1; //事件对应序列化后的proto内容 bytes eventData = 2; } //回放,客户端要求 message PBReplay { // IResponse 8955 repeated PBReplayCell cells = 1 [packed = false]; } "
},
{
	"uri": "/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%89%96%E6%9E%90/%E6%89%91%E5%85%8B%E6%B5%81%E7%A8%8B%E5%9B%BE/",
	"title": "扑克流程图",
	"tags": [],
	"description": "",
	"content": "流程图 graph TD 加入房间[加入房间]--\u003e准备[准备] 准备 --\u003e选择包庄 选择包庄--\u003e包庄 选择包庄--\u003e不包庄 不包庄--\u003e|赢家先出|出牌 包庄--\u003e|包庄先出|出牌[出牌/过,必须出牌时不能选择过] 是否结束--\u003e|N|下一个玩家 下一个玩家--\u003e|出牌/过|出牌 结算--\u003e|局数满|房间结束 结算--\u003e|下一局开始|准备 是否结束--\u003e|小局结算|结算 出牌 --\u003e是否结束 出牌 sequenceDiagram 玩家一-\u003e\u003e服务器:出牌|AskOut 服务器--\u003e\u003e玩家一:广播玩家一的出牌|UseOut 服务器--\u003e\u003e玩家二:广播玩家一的出牌|UseOut 服务器--\u003e\u003e玩家三:广播玩家一的出牌|UseOut 服务器--\u003e\u003e玩家四:广播玩家一的出牌|UseOut 服务器-\u003e\u003e玩家二:提示玩家二出牌|hintOut 服务器--\u003e\u003e玩家一:等待玩家二出牌|hintOut 服务器--\u003e\u003e玩家三:等待玩家二出牌|hintOut 服务器--\u003e\u003e玩家四:等待玩家二出牌|hintOut 包庄 sequenceDiagram 服务器-\u003e\u003e玩家一:提示包庄|HintBaoZhuang 服务器--\u003e\u003e玩家二:等待玩家一包庄|HintBaoZhuang 服务器--\u003e\u003e玩家三:等待玩家一包庄|HintBaoZhuang 服务器--\u003e\u003e玩家四:等待玩家一包庄|HintBaoZhuang 玩家一-\u003e\u003e服务器:包庄/不包庄|AskBaoZhuang 服务器--\u003e\u003e玩家一:广播玩家一包庄/不包庄|UseBaoZhuang 服务器--\u003e\u003e玩家二:广播玩家一包庄/不包庄|UseBaoZhuang 服务器--\u003e\u003e玩家三:广播玩家一包庄/不包庄|UseBaoZhuang 服务器--\u003e\u003e玩家四:广播玩家一包庄/不包庄|UseBaoZhuang 过 graph TD; 过--\u003e广播过[广播玩家过牌] 广播过--\u003e上次出牌[判断最近一次出牌是否是自己] 上次出牌--\u003e|是|清除桌子上的牌 清除桌子上的牌--\u003e提示再次出牌 上次出牌--\u003e|否|提示下个玩家出牌 "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/poker-mask/",
	"title": "扑克掩码表",
	"tags": [],
	"description": "",
	"content": "JSON格式\n掩码 说明 0 单张3 1 单张4 2 单张5 3 单张6 4 单张7 5 单张8 6 单张9 7 单张10 8 单张J 9 单张Q 10 单张K 11 单张A 12 单张2 13 单张小王 14 单张大王 15 一对3 16 一对4 17 一对5 18 一对6 19 一对7 20 一对8 21 一对9 22 一对10 23 一对J 24 一对Q 25 一对K 26 一对A 27 一对2 28 一对小王 29 一对大王 30 三张3 31 三张4 32 三张5 33 三张6 34 三张7 35 三张8 36 三张9 37 三张10 38 三张J 39 三张Q 40 三张K 41 三张A 42 三张2 43 三张3带1 44 三张4带1 45 三张5带1 46 三张6带1 47 三张7带1 48 三张8带1 49 三张9带1 50 三张10带1 51 三张J带1 52 三张Q带1 53 三张K带1 54 三张A带1 55 三张2带1 56 三张3带2 57 三张4带2 58 三张5带2 59 三张6带2 60 三张7带2 61 三张8带2 62 三张9带2 63 三张10带2 64 三张J带2 65 三张Q带2 66 三张K带2 67 三张A带2 68 三张2带2 69 3-4飞机 70 4-5飞机 71 5-6飞机 72 6-7飞机 73 7-8飞机 74 8-9飞机 75 9-10飞机 76 10-J飞机 77 J-Q飞机 78 Q-K飞机 79 K-A飞机 80 3-5飞机 81 4-6飞机 82 5-7飞机 83 6-8飞机 84 7-9飞机 85 8-10飞机 86 9-J飞机 87 10-Q飞机 88 J-K飞机 89 Q-A飞机 90 3-6飞机 91 4-7飞机 92 5-8飞机 93 6-9飞机 94 7-10飞机 95 8-J飞机 96 9-Q飞机 97 10-K飞机 98 J-A飞机 99 3-7飞机 100 4-8飞机 101 5-9飞机 102 6-10飞机 103 7-J飞机 104 8-Q飞机 105 9-K飞机 106 10-A飞机 107 3-8飞机 108 4-9飞机 109 5-10飞机 110 6-J飞机 111 7-Q飞机 112 8-K飞机 113 9-A飞机 114 3-7顺子 115 4-8顺子 116 5-9顺子 117 6-10顺子 118 7-J顺子 119 8-Q顺子 120 9-K顺子 121 10-A顺子 122 3-8顺子 123 4-9顺子 124 5-10顺子 125 6-J顺子 126 7-Q顺子 127 8-K顺子 128 9-A顺子 129 3-9顺子 130 4-10顺子 131 5-J顺子 132 6-Q顺子 133 7-K顺子 134 8-A顺子 135 3-10顺子 136 4-J顺子 137 5-Q顺子 138 6-K顺子 139 7-A顺子 140 3-J顺子 141 4-Q顺子 142 5-K顺子 143 6-A顺子 144 3-Q顺子 145 4-K顺子 146 5-A顺子 147 3-K顺子 148 4-A顺子 149 3-A顺子 150 3-4连对 151 4-5连对 152 5-6连对 153 6-7连对 154 7-8连对 155 8-9连对 156 9-10连对 157 10-J连对 158 J-Q连对 159 Q-K连对 160 K-A连对 161 3-5连对 162 4-6连对 163 5-7连对 164 6-8连对 165 7-9连对 166 8-10连对 167 9-J连对 168 10-Q连对 169 J-K连对 170 Q-A连对 171 3-6连对 172 4-7连对 173 5-8连对 174 6-9连对 175 7-10连对 176 8-J连对 177 9-Q连对 178 10-K连对 179 J-A连对 180 3-7连对 181 4-8连对 182 5-9连对 183 6-10连对 184 7-J连对 185 8-Q连对 186 9-K连对 187 10-A连对 188 3-8连对 189 4-9连对 190 5-10连对 191 6-J连对 192 7-Q连对 193 8-K连对 194 9-A连对 195 3-9连对 196 4-10连对 197 5-J连对 198 6-Q连对 199 7-K连对 200 8-A连对 201 3-10连对 202 4-J连对 203 5-Q连对 204 6-K连对 205 7-A连对 206 3-J连对 207 4-Q连对 208 5-K连对 209 6-A连对 210 3-Q连对 211 4-K连对 212 5-A连对 213 3-K连对 214 4-A连对 215 3-A连对 216 副510k 217 方块正510k 218 梅花正510k 219 红桃正510k 220 黑桃正510k 221 3个510k 222 4个510k 223 4张3 224 4张4 225 4张5 226 4张6 227 4张7 228 4张8 229 4张9 230 4张10 231 4张J 232 4张Q 233 4张K 234 4张A 235 4张2 236 5张3 237 5张4 238 5张5 239 5张6 240 5张7 241 5张8 242 5张9 243 5张10 244 5张J 245 5张Q 246 5张K 247 5张A 248 5张2 249 6张3 250 6张4 251 6张5 252 6张6 253 6张7 254 6张8 255 6张9 256 6张10 257 6张J 258 6张Q 259 6张K 260 6张A 261 6张2 262 7张3 263 7张4 264 7张5 265 7张6 266 7张7 267 7张8 268 7张9 269 7张10 270 7张J 271 7张Q 272 7张K 273 7张A 274 7张2 275 8张3 276 8张4 277 8张5 278 8张6 279 8张7 280 8张8 281 8张9 282 8张10 283 8张J 284 8张Q 285 8张K 286 8张A 287 8张2 288 3张王 289 4张王 290 3-4无翼飞机 291 4-5无翼飞机 292 5-6无翼飞机 293 6-7无翼飞机 294 7-8无翼飞机 295 8-9无翼飞机 296 9-10无翼飞机 297 10-J无翼飞机 298 J-Q无翼飞机 299 Q-K无翼飞机 300 K-A无翼飞机 301 3-5无翼飞机 302 4-6无翼飞机 303 5-7无翼飞机 304 6-8无翼飞机 305 7-9无翼飞机 306 8-10无翼飞机 307 9-J无翼飞机 308 10-Q无翼飞机 309 J-K无翼飞机 310 Q-A无翼飞机 311 3-6无翼飞机 312 4-7无翼飞机 313 5-8无翼飞机 314 6-9无翼飞机 315 7-10无翼飞机 316 8-J无翼飞机 317 9-Q无翼飞机 318 10-K无翼飞机 319 J-A无翼飞机 320 3-7无翼飞机 321 4-8无翼飞机 322 5-9无翼飞机 323 6-10无翼飞机 324 7-J无翼飞机 325 8-Q无翼飞机 326 9-K无翼飞机 327 10-A无翼飞机 328 3-8无翼飞机 329 4-9无翼飞机 330 5-10无翼飞机 331 6-J无翼飞机 332 7-Q无翼飞机 333 8-K无翼飞机 334 9-A无翼飞机 335 3-9无翼飞机 336 4-10无翼飞机 337 5-J无翼飞机 338 6-Q无翼飞机 339 7-K无翼飞机 340 8-A无翼飞机 341 3-10无翼飞机 342 4-J无翼飞机 343 5-Q无翼飞机 344 6-K无翼飞机 345 7-A无翼飞机 346 3-J无翼飞机 347 4-Q无翼飞机 348 5-K无翼飞机 349 6-A无翼飞机 350 3-Q无翼飞机 351 4-K无翼飞机 352 5-A无翼飞机 353 3-K无翼飞机 354 4-A无翼飞机 355 3-A无翼飞机 356 9张3 357 9张4 358 9张5 359 9张6 360 9张7 361 9张8 362 9张9 363 9张10 364 9张J 365 9张Q 366 9张K 367 9张A 368 9张2 369 10张3 370 10张4 371 10张5 372 10张6 373 10张7 374 10张8 375 10张9 376 10张10 377 10张J 378 10张Q 379 10张K 380 10张A 381 10张2 382 11张3 383 11张4 384 11张5 385 11张6 386 11张7 387 11张8 388 11张9 389 11张10 390 11张J 391 11张Q 392 11张K 393 11张A 394 11张2 395 12张3 396 12张4 397 12张5 398 12张6 399 12张7 400 12张8 401 12张9 402 12张10 403 12张J 404 12张Q 405 12张K 406 12张A 407 12张2 408 13张3 409 13张4 410 13张5 411 13张6 412 13张7 413 13张8 414 13张9 415 13张10 416 13张J 417 13张Q 418 13张K 419 13张A 420 13张2 421 14张3 422 14张4 423 14张5 424 14张6 425 14张7 426 14张8 427 14张9 428 14张10 429 14张J 430 14张Q 431 14张K 432 14张A 433 14张2 434 15张3 435 15张4 436 15张5 437 15张6 438 15张7 439 15张8 440 15张9 441 15张10 442 15张J 443 15张Q 444 15张K 445 15张A 446 15张2 447 16张3 448 16张4 449 16张5 450 16张6 451 16张7 452 16张8 453 16张9 454 16张10 455 16张J 456 16张Q 457 16张K 458 16张A 459 16张2 460 17张3 461 17张4 462 17张5 463 17张6 464 17张7 465 17张8 466 17张9 467 17张10 468 17张J 469 17张Q 470 17张K 471 17张A 472 17张2 473 18张3 474 18张4 475 18张5 476 18张6 477 18张7 478 18张8 479 18张9 480 18张10 481 18张J 482 18张Q 483 18张K 484 18张A 485 18张2 486 19张3 487 19张4 488 19张5 489 19张6 490 19张7 491 19张8 492 19张9 493 19张10 494 19张J 495 19张Q 496 19张K 497 19张A 498 19张2 499 20张3 500 20张4 501 20张5 502 20张6 503 20张7 504 20张8 505 20张9 506 20张10 507 20张J 508 20张Q 509 20张K 510 20张A 511 20张2 600 5个510k 601 6个510k 602 7个510k 603 8个510k 650 一对红心5 660 火箭 670 3张3带1对 671 3张4带1对 672 3张5带1对 673 3张6带1对 674 3张7带1对 675 3张8带1对 676 3张9带1对 677 3张10带1对 678 3张J带1对 679 3张Q带1对 680 3张K带1对 681 3张A带1对 682 3张2带1对 690 4张3带2 691 4张4带2 692 4张5带2 693 4张6带2 694 4张7带2 695 4张8带2 696 4张9带2 697 4张10带2 698 4张J带2 699 4张Q带2 700 4张K带2 701 4张A带2 702 4张2带2 710 3-4单飞飞机 711 4-5单飞飞机 712 5-6单飞飞机 713 6-7单飞飞机 714 7-8单飞飞机 715 8-9单飞飞机 716 9-10单飞飞机 717 10-J单飞飞机 718 J-Q单飞飞机 719 Q-K单飞飞机 720 K-A单飞飞机 721 3-5单飞飞机 722 4-6单飞飞机 723 5-7单飞飞机 724 6-8单飞飞机 725 7-9单飞飞机 726 8-10单飞飞机 727 9-J单飞飞机 728 10-Q单飞飞机 729 J-K单飞飞机 730 Q-A单飞飞机 731 3-6单飞飞机 732 4-7单飞飞机 733 5-8单飞飞机 734 6-9单飞飞机 735 7-10单飞飞机 736 8-J单飞飞机 737 9-Q单飞飞机 738 10-K单飞飞机 739 J-A单飞飞机 740 3-7单飞飞机 741 4-8单飞飞机 742 5-9单飞飞机 743 6-10单飞飞机 744 7-J单飞飞机 745 8-Q单飞飞机 746 9-K单飞飞机 747 10-A单飞飞机 748 3-8单飞飞机 749 4-9单飞飞机 750 5-10单飞飞机 751 6-J单飞飞机 752 7-Q单飞飞机 753 8-K单飞飞机 754 9-A单飞飞机 760 4张3带1 761 4张4带1 762 4张5带1 763 4张6带1 764 4张7带1 765 4张8带1 766 4张9带1 767 4张10带1 768 4张J带1 769 4张Q带1 770 4张K带1 771 4张A带1 772 4张2带1 773 4张3带1对 774 4张4带1对 775 4张5带1对 776 4张6带1对 777 4张7带1对 778 4张8带1对 779 4张9带1对 780 4张10带1对 781 4张J带1对 782 4张Q带1对 783 4张K带1对 784 4张A带1对 785 4张2带1对 786 4张3带2对 787 4张4带2对 788 4张5带2对 789 4张6带2对 790 4张7带2对 791 4张8带2对 792 4张9带2对 793 4张10带2对 794 4张J带2对 795 4张Q带2对 796 4张K带2对 797 4张A带2对 798 4张2带2对 800 3-4飞机带对 801 4-5飞机带对 802 5-6飞机带对 803 6-7飞机带对 804 7-8飞机带对 805 8-9飞机带对 806 9-10飞机带对 807 10-J飞机带对 808 J-Q飞机带对 809 Q-K飞机带对 810 K-A飞机带对 811 3-5飞机带对 812 4-6飞机带对 813 5-7飞机带对 814 6-8飞机带对 815 7-9飞机带对 816 8-10飞机带对 817 9-J飞机带对 818 10-Q飞机带对 819 J-K飞机带对 820 Q-A飞机带对 821 3-6飞机带对 822 4-7飞机带对 823 5-8飞机带对 824 6-9飞机带对 825 7-10飞机带对 826 8-J飞机带对 827 9-Q飞机带对 828 10-K飞机带对 829 J-A飞机带对 830 3-7飞机带对 831 4-8飞机带对 832 5-9飞机带对 833 6-10飞机带对 834 7-J飞机带对 835 8-Q飞机带对 836 9-K飞机带对 837 10-A飞机带对 840 3-8飞机带对 841 4-9飞机带对 842 5-10飞机带对 843 6-J飞机带对 844 7-Q飞机带对 845 8-K飞机带对 846 9-A飞机带对 850 方块K五花牛 851 梅花K五花牛 852 红桃K五花牛 853 黑桃K五花牛 860 4张3带3 861 4张4带3 862 4张5带3 863 4张6带3 864 4张7带3 865 4张8带3 866 4张9带3 867 4张10带3 868 4张J带3 869 4张Q带3 870 4张K带3 871 4张A带3 872 4张2带3 900 A炸弹牛 901 2炸弹牛 902 3炸弹牛 903 4炸弹牛 904 5炸弹牛 905 6炸弹牛 906 7炸弹牛 907 8炸弹牛 908 9炸弹牛 909 10炸弹牛 910 J炸弹牛 911 Q炸弹牛 912 K炸弹牛 920 A顺子牛 921 2顺子牛 922 3顺子牛 923 4顺子牛 924 5顺子牛 925 6顺子牛 926 7顺子牛 927 8顺子牛 928 9顺子牛 929 10顺子牛 930 J顺子牛 931 Q顺子牛 932 K顺子牛 940 单张红心5 950 大小王 "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E7%BA%A2%E5%BF%835/",
	"title": "宜黄红心5",
	"tags": [],
	"description": "",
	"content": "错误码 从10000到10099\n错误码 描述 10001 success 10002 数据反序化失败 10003 地区玩法错误 10004 未知事件 10005 没有该用户 10006 用户未登录 10007 用户验证失败 10008 用户重复登录 10009 已加入其他游戏 10010 已登陆其他服务器 10012 加入房间失败 10013 房间不存在 10014 房间已经满人 10015 用户已在房间中 10016 该用户没有在任何房间 10020 重复申请解散 10021 房间不在解散中 10022 获取距离失败 10023 退出房间失败 10024 房间不在准备中 10027 重复解散投票 10028 用户不在当前房间 10029 房间已开始游戏 10030 坐下失败,游戏币不足 10031 没有空房间 10032 重复准备 10033 用户已在其他设备登陆 10034 用户信息读取失败 10035 准备失败,游戏币不足 10036 创建VIP房间失败,游戏币不足 10037 VIP房间, 加入失败 10038 加入VIP房间失败, 密码错误 10039 非VIP房间 10040 无权包牌 10041 房间不在选择包牌中 10045 房间不在游戏中 10046 无权不出 10047 不出token错误 10048 必须出牌 10049 出牌token错误 10050 出牌不符合规则 10051 无权出牌 10052 你没有处于托管中 10053 数据库操作失败 10054 取消托管的次数已经用光 10055 你处于托管中 事件定义 从10000到10099 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 s-\u0026gt;m 服务器端广播到客户端 事件编号 事件名称 事件流向 是否返回 描述 10001 登录 c-\u0026gt;s true 10002 服务器返回 s-\u0026gt;c 服务器返回,包括成功和异常 10003 心跳包 c-\u0026gt;s true 服务器回空包 10004 房间列表 s-\u0026gt;m 广播给大厅内但不在房间的玩家 10005 房间变化 s-\u0026gt;m 广播给大厅内但不在房间的玩家 10006 加入房间 c-\u0026gt;s true 快速开始-不用填房间号 10007 房间信息 s-\u0026gt;c 加入房间推送或在房间内掉线回来推送 10008 准备 c-\u0026gt;s 玩家准备及取消准备 10009 玩家变化 s-\u0026gt;m 加入,离开,上线,掉线,准备,取消准备都广播房间内玩家 10010 游戏信息 s-\u0026gt;c 开始游戏推送或游戏内掉线回来推送 10011 申请解散 c-\u0026gt;s 如果房间未开始,当作退出房间处理 10012 提示玩家投票 s-\u0026gt;m 广播给房间内玩家 10013 玩家投票 c-\u0026gt;s 玩家是否同意解散 10014 广播解散结果 s-\u0026gt;m 广播给房间内玩家 10015 请求LBS c-\u0026gt;s 10016 回复LBS s-\u0026gt;c 10017 请求退出房间 c-\u0026gt;s true 服务器返回 10018 顶号 s-\u0026gt;c 同个用户只能一个连接,新的顶替旧的 10019 请求历史积分 c-\u0026gt;s 10020 回复历史积分 s-\u0026gt;c 10021 近距离提示 m 10022 聊天 m 客户端和服务器广播同一个命令字/PB结构,服务器不做任何处理 10023 游戏信息 s-\u0026gt;c 刷新游戏信息 10031 系统发牌 s-\u0026gt;m 广播给房间内玩家,每个人信息不同 10032 提示打独 s-\u0026gt;m 让玩家选择是否打独 10033 玩家是否打独 c-\u0026gt;s 玩家是否打独,出错回包,成功不回 10034 广播是否打独 s-\u0026gt;m 通知打独 10035 广播亮牌 s-\u0026gt;m 通知找朋友牌 10036 提示出牌 s-\u0026gt;m 通知玩家出牌 10037 玩家出牌 c-\u0026gt;s 玩家出牌,出错时回包,成功不回 10038 广播出牌 s-\u0026gt;m 广播给房间内玩家,玩家出牌 10039 广播清桌 s-\u0026gt;m 广播给房间内玩家,通知清桌 10040 摊牌 s-\u0026gt;m 广播给房间内玩家 10041 小局结算 s-\u0026gt;m 广播给房间内玩家 10042 回放游戏信息 10055 回放 10056 广播用户进入托管模式 s-\u0026gt;m 10057 取消托管模式 c-\u0026gt;s true 10058 广播托管模式 s-\u0026gt;m 协议PB结构 玩家结构 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家信息 message EventPlayerInfo { //用户ID int32 userId = 1; //在线状态 true -- 在线 false -- 离线 bool onlineStatus = 2; //准备状态 true --准备 false --未准备 bool readyStatus = 3; //游戏币数(精确到分) int64 coins = 4; //座位ID 0，1，2，3 int32 seatId = 5; //昵称 string nickName = 6; //头像url string headUrl = 7; //用户IP string ip = 8; // 性别 0-没有设置,1--男 2--女 int32 sex = 9; //总积分 int32 totalJiFen = 10; //登录地址 string loginAddress = 11; } 广播托管模式 // 取消托管成功 message EventCancelEntrustDone { // IResponse 10058 // 取消托管用户座位号 int32 seat = 1; } 取消托管模式 // 取消托管 message EventCancelEntrust { // IRequest 10057 } 广播用户进入托管模式 // 广播用户进入托管 message EventInEntrust { // IResponse 10056 // 进入托管用户的座位号 int32 seat = 1; // 还有多少次可以取消托管 int32 count = 2; } 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn{ //事件ID int32 eventId = 1; //返回码-错误编码 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; //房间列表 message EventRoomList { // 房间列表 repeated EventRoomInfo items = 1[packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;room_info.proto\u0026#34;; // 大厅内有房间内变化,广播所有大厅里不在房间内玩家 message EventUseRoomChange { //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 快速开始-不用填房间号\nsyntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; //房间信息 message EventRoomInfo { // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中,5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7[packed = false]; // 最低局数 int32 minGameNum = 8; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { //true-准备 false--取消准备 bool isReady = 1; } 玩家变化 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;player_info.proto\u0026#34;; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4[packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;use_out.proto\u0026#34;; message PBBombType { repeated int32 bts = 1[packed = false]; } message PBGameInfo { // IResponse 10010 // 是否打独 bool isAlone = 1; // 找朋友亮牌 int32 friendPai = 2; // 朋友关系是否出现 bool friendShow = 3; // 按座位号记录每个玩家对应朋友关系,朋友关系出现才有效 repeated int32 friendShip = 4[packed = false]; // 对家用户id,朋友关系出现才有效 int32 friendUserId = 5; // 叫牌者用户id int32 bankerUserId = 6; // 叫牌者座位id int32 bankerSeatId = 7; // 当前桌牌(按出牌顺序) repeated PBUseOut desktopPai = 8[packed = false]; // 当前桌牌分 int32 desktopScore = 9; // 当前手牌 repeated int32 handPai = 10[packed = false]; // 每个玩家抓分(座位号为下标) repeated int32 catchScore = 11[packed = false]; // 每个玩家炸弹输赢分(座位号为下标) repeated int32 bombScore = 12[packed = false]; // 能否出牌 bool canOutPai = 13; // 是否必须出牌 bool mustOutPai = 14; // 出牌token string outPaiToken = 15; // 当前出牌座位号 int32 curOutPaiSeat = 16; // 是否选择打独中 bool isChoiceAlone = 17; // 当前选择打独座位号 int32 choiceSeatId =18; // 每个玩家出完顺序(座位号为下标),0-没出完,1-头游,2-二游,3-三游,4-四游 repeated int32 overOrder = 19[packed = false]; // 每个玩家剩余张数(座位号为下标),小于等于5张才有效 repeated int32 restNum = 20[packed = false]; // 每个玩家炸弹赔率(座位号为下标) repeated int32 bombOdds = 21[packed = false]; // 选择打独中时，还剩余多少秒考虑时间 int32 remainAloneTime = 22; // 出牌时的剩余时间 int32 remainOutTime = 23; // 是否处于托管中 repeated bool isEntrust = 24[packed = false]; // 还有几次取消托管的机会 int32 cancelEntrustCount = 25; // 炸弹类型，按座位号 repeated PBBombType bombTypes = 26[packed = false]; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { } 提示玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家的投票情况 message EventPlayerVote { int32 userId = 1; string nickName = 2; //投票结果 0--未投票 1--同意 2--拒绝 int32 vote = 3; } // 提示玩家投票及广播解散意见,玩家如果没有投票,则提示投票,否则仅显示 message EventQueryDismassRoom { //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3[packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家投票 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { //true--同意 false--拒绝 bool isAgree = 1; } 广播解散结果 syntax = \u0026#34;proto3\u0026#34;; package event; //解散房间的结果 message EventNoticeDismassRoom { //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 请求LBS syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { } 回复LBS syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseGeoItem { //起始用户ID int32 srcUid = 1; //结束用户ID int32 destUid = 2; //用户之间距离 string distance = 3; //用户之间距离,数值表示,单位(米) int32 gap = 4; } //玩家间距离回包 message EventUseGeo { // 用户ID列表 repeated int32 uids = 1[packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2[packed = false]; } 请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { } 顶号 syntax = \u0026#34;proto3\u0026#34;; package event; //同个用户新登陆踢出旧登陆 message EventKickOut { //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { } 回复历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; message EventHistoryScoreItem { // 用户ID int32 userId = 1; // 下标-局数,值-积分 repeated int32 scores = 2[packed = false]; } // 历史积分回包 message EventUseHistoryScore { repeated EventHistoryScoreItem items = 1[packed = false]; } 近距离提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { //提示内容 string alertStr = 1; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 10023 } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAssignPai { // 系统开始发的手牌 repeated int32 pai = 1[packed = false]; } 提示打独 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintAlone { // 是否能选择打独 bool canAlone =1; // 当前叫牌者座位号 int32 seatId =2; // 当前叫牌者用户id int32 userId =3; // 剩余多少秒的考虑时间 int32 countdown = 4; } 玩家是否打独 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskAlone { // 是否打独 bool isAlone =1; } 广播是否打独 syntax = \u0026#34;proto3\u0026#34;; package event; import \u0026#34;assign_pai.proto\u0026#34;; message PBUseAlone { // IResponse 10034 // 是否打独 bool isAlone = 1; // 当前叫牌者座位号 int32 seatId =2; // 当前叫牌者用户id int32 userId =3; // 所有玩家的手牌 repeated PBAssignPai allPai = 4[packed = false]; } 广播亮牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBUseFriend { // 庄家座位号 int32 seatId =1; // 庄家用户id int32 userId =2; // 找朋友的牌 int32 friendPai =3; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBHintOut { // 出牌token string token =1; // 当前出牌者座位号 int32 seatId =2; // 是否必须出牌 bool isForce = 3; // 倒计时 int32 countdown = 4; } 玩家出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut{ // 出牌token,处理重复出牌 string token=1; // 此次出的牌 repeated int32 pai = 2[packed = false]; // 是否不出 bool isSkip = 3; } 广播出牌 扑克牌型掩码文档\nsyntax = \u0026#34;proto3\u0026#34;; package event; message PBUseOut { // IResponse 10038 // 出牌玩家座位号 int32 seatId =1; // 出牌玩家用户id int32 userId =2; // 出的牌 repeated int32 pai = 3[packed = false]; // 是否包括找朋友牌,出牌者不是叫牌者 bool containFriendPai =4; // 包括此次出牌的桌面分 int32 desktopScore =5; // 牌分类,1-单张,2-对子,3-3张,4-3带1,5-3带2, 6-顺子,7-连对,8-飞机 // 10-4炸,11-5炸,12-6炸,13-7炸,14-8炸,15-纯色双王 // 16-5炸(四红/四黑),17-6炸(四红/四黑), // 20-三王,21-四王,26--四炸(四红/四黑), // 27-一对红心5,28-四张红5,29--8张5, int32 paiClass = 6; // 牌掩码,例如单张3,3张3带2,见文档 int32 paiMask = 7; // 出完位置,0-没出完,1-头游,2-二游,3-三游,4-四游 int32 overOrder = 8; // 按座位号记录每个玩家此次炸弹或纯色双王的输赢分,赢分为正数,输分为负数 repeated int32 bombScore = 9[packed = false]; // 第几轮 int32 roundIndex = 10; // 同一轮第几次 int32 roundSerial = 11; // 按座位号记录每个玩家对应朋友关系,必须出现找朋友牌才有效 repeated int32 friendShip = 12[packed = false]; // 是否不出 bool isSkip =13; // 炸弹或纯色双王的赔率 int32 bombOdds =14; // 剩余张数,小于等于5张才有效 int32 restNum =15; // 打出的朋友牌，containFriendPai=true时才有效 int32 friendPai = 17; } 广播清桌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBClearDesktop{ // 大牌的玩家座位号 int32 seatId =1; // 大牌的玩家用户id int32 userId =2; // 此次大牌玩家赚的桌面分 int32 desktopScore =3; // 每个玩家抓桌面分(座位号为下标) repeated int32 catchScore = 4[packed = false]; // 第几轮 int32 roundIndex = 5; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; //用户的手牌 message PBTanPaiItem { //玩家ID int32 userId = 1; //玩家ID int32 seatId = 2; //手牌 repeated int32 normalPai = 3[packed = false]; } //摊牌 message PBTanPai { repeated PBTanPaiItem items = 1[packed = false]; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; message PBSmallMeta { //玩家ID int32 userId = 1; //玩家昵称 string nickName = 2; //当前总游戏币(精确到分) int64 totalCoins = 4; //此局输赢分(牌局结束输赢+炸弹),赢分为正数,输分为负数 int32 winScore = 5; //此局炸弹输赢分,赢分为正数,输分为负数 int32 bombScore = 6; //出完顺序,0-没出完,1-头游,2-二游,3,三游,4-四游 int32 overOrder = 7; //是否双围 bool isDouble = 8; //是否打独 bool isAlone = 9; //炸弹赔率 int32 bombOdds = 10; //是否庄家(此局第一个出牌人) bool isBanker = 11; //队友座位号(找朋友模式才有效) int32 friendSeatId = 12; //0-没有原炸,2-大原炸 int32 fryState = 13; //捡分 int32 catchScore = 14; //牌局结束输赢分,赢分为正数,输分为负数 int32 cardScore = 15; //输赢游戏币数（单位：分） int32 winGold = 16; //是否单边 bool isSingle = 17; } message PBSmallSettlement { //房间号 int32 id = 1; //房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; //当前局数 int32 now = 3; //下局局数, 如果房间状态为：3， 这里为： int32 next = 4; //总局数 int32 total = 5; //玩法名称 string name = 6; //玩法描述 string doc = 7; //时间 string time = 8; //各玩家的情况,座位号为下标 repeated PBSmallMeta players = 9[packed = false]; //是否打独 bool isAlone = 10; //为true表示数据(是否打独,是否双围,是否庄家,队友座位号,出完顺序)有效,否则无效 bool dataValid = 11; //房间底分 int32 baseScore = 12; //结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 13; //结束文字说明 string overDoc = 14; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 10042 // 是否打独 bool isAlone = 1; // 找朋友亮牌 int32 friendPai = 2; // 叫牌者用户id int32 bankerUserId = 3; // 叫牌者座位id int32 bankerSeatId = 4; // 系统发的手牌,按座位号为下标 repeated PBAssignPai handPai = 5[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; message PBReplayCell { //对应的事件ID int32 eventId = 1; //事件对应序列化后的proto内容 bytes eventData = 2; } //回放,客户端要求 message PBReplay { // IResponse 10055 repeated PBReplayCell cells = 1[packed = false]; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86/",
	"title": "宜黄麻将",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 10245 房间不在游戏中 10246 无权不出 10247 不出token错误 10248 必须出牌 10249 出牌token错误 10250 出牌错误 10251 无权出牌 10252 操作被取消 事件定义 从10200到10299 事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 10201 登录 c-\u0026gt;s 进入游戏要进行登录验证 10202 服务器返回 s-\u0026gt;c 服务器通用返回 10203 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 10204 房间列表 c-\u0026gt;s 房间列表 10205 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 10206 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 10207 房间信息 c-\u0026gt;s 房间信息 10208 准备 c-\u0026gt;s 准备 10209 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 10210 游戏信息 s-\u0026gt;c 游戏信息 10211 申请解散 c-\u0026gt;s 申请解散 10212 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 10213 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 10214 解散房间的结果 s-\u0026gt;c 解散房间的结果 10215 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 10216 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 10217 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 10218 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 10219 请求历史积分 c-\u0026gt;s 请求历史积分 10220 历史积分回包 s-\u0026gt;c 历史积分回包 10221 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 10222 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 10223 游戏信息 s-\u0026gt;c 刷新游戏信息 10231 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 10232 系统发牌 s-\u0026gt;c 系统发牌 10233 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 10234 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 10235 请求出牌 c-\u0026gt;s 请求出牌 10236 广播出牌结果 s-\u0026gt;c 广播出牌结果 10237 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 10238 摊牌 s-\u0026gt;c 摊牌 10239 小局结算 s-\u0026gt;c 小局结算 10240 回放游戏信息 s-\u0026gt;c 回放游戏信息 10255 回放 c-\u0026gt;s 回放,客户端要求 10259 创建VIP房间 c-\u0026gt;s 创建VIP房间 10260 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 10201 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 10202 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 10203 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 10204 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 10205 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 10206 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 10207 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 10208 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 10209 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 10210 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 10211 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 10212 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 10213 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 10214 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 10215 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 10216 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 10217 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 10218 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 10219 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 10220 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 10221 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 10222 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 10223 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 10231 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 10232 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 10233 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 10234 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 10235 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 10236 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 10237 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 10238 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 10239 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 10240 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 10255 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 10259 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 10260 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/%E5%AE%9C%E9%BB%84%E9%BA%BB%E5%B0%86%E4%BA%8C%E4%BA%BA%E5%9C%BA/",
	"title": "宜黄麻将二人场",
	"tags": [],
	"description": "",
	"content": "错误码 错误码 描述 10145 房间不在游戏中 10146 无权不出 10147 不出token错误 10148 必须出牌 10149 出牌token错误 10150 出牌错误 10151 无权出牌 10152 操作被取消 事件定义 从10100到10199\n事件流向：\nc-\u0026gt;s 客户端发送到服务器端 s-\u0026gt;c 服务器端发送到客户端 事件编号 事件名称 事件流向 描述 备注 10101 登录 c-\u0026gt;s 进入游戏要进行登录验证 10102 服务器返回 s-\u0026gt;c 服务器通用返回 10103 心跳包 c-\u0026gt;s 客户端每5秒向服务端发起心跳包 10104 房间列表 c-\u0026gt;s 房间列表 10105 大厅内有房间变化 s-\u0026gt;c 大厅内有房间内变化,广播所有大厅里不在房间内玩家 10106 加入房间 c-\u0026gt;s 房间ID,不填房间号,就是系统选房间即快速开始 10107 房间信息 c-\u0026gt;s 房间信息 10108 准备 c-\u0026gt;s 准备 10109 广播房间变化 s-\u0026gt;c 房间内有玩家变化,广播给房间内玩家 10110 游戏信息 s-\u0026gt;c 游戏信息 10111 申请解散 c-\u0026gt;s 申请解散 10112 提示玩家投票及广播解散意见 s-\u0026gt;c 提示玩家投票及广播解散意见 10113 玩家是否同意解散 c-\u0026gt;s 玩家是否同意解散 10114 解散房间的结果 s-\u0026gt;c 解散房间的结果 10115 玩家间距离请求 c-\u0026gt;s 玩家间距离请求 10116 玩家间距离回包 s-\u0026gt;c 玩家间距离回包 10117 用户请求退出房间 c-\u0026gt;s 用户请求退出房间 10118 同个用户新登陆踢出旧登陆 s-\u0026gt;c 同个用户新登陆踢出旧登陆 10119 请求历史积分 c-\u0026gt;s 请求历史积分 10120 历史积分回包 s-\u0026gt;c 历史积分回包 10121 玩家间距离太近提示 s-\u0026gt;c 玩家间距离太近提示 10122 聊天 客户端和服务器广播同一个命令字,同一个PB结构;服务器纯广播,不做任何处理 10123 游戏信息 s-\u0026gt;c 刷新游戏信息 10131 广播骰子结果 s-\u0026gt;c 广播骰子结果,暂时没有用到 10132 系统发牌 s-\u0026gt;c 系统发牌 10133 提示出牌 s-\u0026gt;c 提示出牌,发给可以出牌的玩家 10134 提示等待出牌 s-\u0026gt;c 提示等待出牌,发给等待别人出牌的玩家 10135 请求出牌 c-\u0026gt;s 请求出牌 10136 广播出牌结果 s-\u0026gt;c 广播出牌结果 10137 广播多个出牌结果 s-\u0026gt;c 广播多个出牌结果,如果多个抢杠胡,则一起发 10138 摊牌 s-\u0026gt;c 摊牌 10139 小局结算 s-\u0026gt;c 小局结算 10140 回放游戏信息 s-\u0026gt;c 回放游戏信息 10155 回放 c-\u0026gt;s 回放,客户端要求 10159 创建VIP房间 c-\u0026gt;s 创建VIP房间 10160 加入VIP房间 c-\u0026gt;s 加入VIP房间 登录 syntax = \u0026#34;proto3\u0026#34;; package event; message EventLogin { // IRequest 10101 //用户登录标识 string token = 1; //客户端校验 md5(token + secret_key) 服务端和客户端约定secret_key string secretString = 2; // 登录地址 string loginAddress = 3; // 登录经度 string loginLng = 4; // 登录纬度 string loginLat = 5; } 服务器返回 syntax = \u0026#34;proto3\u0026#34;; package event; message EventReturn { // IResponse 10102 //事件ID int32 eventId = 1; //返回码 0--表示成功 其它的为错误 int32 code = 2; //描述 string message = 3; } 心跳包 syntax = \u0026#34;proto3\u0026#34;; package event; //心跳包 message EventHeartBeat { // IResponse IRequest 10103 } 房间列表 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomList { // IResponse 10104 // 房间列表 repeated EventRoomInfo items = 1 [packed = false]; // 开始房间数 int32 StartedRoomNum = 2; } 大厅内有房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; message EventUseRoomChange { // IResponse 10105 //变化原因 (0-创建,1-更新资料,2-开始游戏,3-解散) int32 reason = 1; //变化后房间信息 EventRoomInfo roomInfo = 2; // 开始房间数 int32 StartedRoomNum = 3; } 加入房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinRoom { // IRequest 10106 //房间ID,不填房间号,就是系统选房间即快速开始 int32 roomId = 1; } 房间信息 syntax = \u0026#34;proto3\u0026#34;; package event; message EventRoomInfo { // IResponse 10107 // 房间id int32 roomId = 1; // 房间状态,0-没开始,1-游戏中,2-小局结束,3-所有已结束,4-房间解散中, 5-选择打独中 int32 status = 2; //当前局数 int32 curGameNum = 3; // 总局数 int32 totalGameNum = 4; // 底分 int32 baseScore = 5; // 玩法描述 string playDes = 6; // 玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 7 [packed = false]; // 最低局数 int32 minGameNum = 8; // 密码 string pwd = 9; } 准备 syntax = \u0026#34;proto3\u0026#34;; package event; message EventAskReady { // IRequest 10108 //true-准备 false--取消准备 bool isReady = 1; } 广播房间变化 syntax = \u0026#34;proto3\u0026#34;; package event; // 房间内有玩家变化,广播给房间内玩家 message EventUsePlayerChange { // IResponse 10109 //变化原因, 0-加入 1-离开,2-准备 3-取消准备,4-上线 5-离线 int32 reason = 1; //变化玩家座位号 int32 seatId = 2; //变化玩家id int32 userId = 3; // 变化后,房间内所有玩家信息(以座位号为顺序) repeated EventPlayerInfo playerInfo = 4 [packed = false]; } 游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 游戏信息 message PBGameInfo { // IResponse 10110 // 骰子结果 PBUseDice dice = 1; // 当前手牌及提示/等待出牌 PBAssignPai assignPai = 2; // 当前出牌池(按出牌顺序) repeated int32 outPaiPool = 3[packed = false]; // 剩下的牌张数 int32 restPaiPoolNum = 4; // 每个玩家信息列表,按座位号为下标 repeated PBHistoryInfo playerInfoList = 5[packed = false]; // 庄家座位号 int32 zhuangSeat = 6; } 申请解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 申请解散 message EventAskDismassRoom { // IRequest 10111 } 提示玩家投票及广播解散意见 syntax = \u0026#34;proto3\u0026#34;; package event; message EventQueryDismassRoom { // IResponse 10112 //申请的玩家ID int32 applyUserId = 1; //申请的玩家昵称 string applyNickName = 2; //各个玩家投票情况 repeated EventPlayerVote playerVote = 3 [packed = false]; //解散还剩的秒数 如：89 int32 remainderTime = 5; } 玩家是否同意解散 syntax = \u0026#34;proto3\u0026#34;; package event; // 玩家上传是否同意解散 message EventReportDismassRoom { // IRequest 10113 //true--同意 false--拒绝 bool isAgree = 1; } 解散房间的结果 syntax = \u0026#34;proto3\u0026#34;; package event; message EventNoticeDismassRoom { // IResponse 10114 //true -- 解散 false --不解散 bool isAgree = 1; //解散原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数, 4-长时间没开始,自动解散 int32 reason = 2; //解散文字说明 string doc = 3; // 房间ID int32 roomId = 4; } 玩家间距离请求 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离请求 message EventAskGeo { // IRequest 10115 } 玩家间距离回包 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离回包 message EventUseGeo { // IResponse 10116 // 用户ID列表 repeated int32 uids = 1 [packed = false]; // 结果列表 repeated EventUseGeoItem Items = 2 [packed = false]; } 用户请求退出房间 syntax = \u0026#34;proto3\u0026#34;; package event; //用户请求退出房间 message EventAskExit { // IRequest 10117 } 同个用户新登陆踢出旧登陆 syntax = \u0026#34;proto3\u0026#34;; package event; message EventKickOut { // IResponse 10118 //用户ID int32 userId = 1; } 请求历史积分 syntax = \u0026#34;proto3\u0026#34;; package event; // 请求历史积分 message EventAskHistoryScore { // IRequest 10119 } 历史积分回包 syntax = \u0026#34;proto3\u0026#34;; package event; // 历史积分回包 message EventUseHistoryScore { // IResponse 10120 repeated EventHistoryScoreItem items = 1 [packed = false]; } 玩家间距离太近提示 syntax = \u0026#34;proto3\u0026#34;; package event; //玩家间距离太近提示 message EventDistanceAlert { // IResponse 10121 //提示内容 string alertStr = 1; } 聊天 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端和服务器广播同一个命令字,同一个PB结构 // 服务器纯广播,不做任何处理 message EventChat { // IResponse IRequest 10122 // 聊天类型 int32 Type = 1; // 聊天内容 string Content = 2; // 聊天扩展 string Extend = 3; // 聊天发起人id int32 authorId = 4; } 刷新游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 客户端刷新房间信息,不推送给其他人, message EventRefreshRoom { // IResponse 10123 } 广播骰子结果 // 广播骰子结果 message PBUseDice { // IResponse 10131 // 小的点数 int32 smaller = 1; // 大的点数 int32 larger = 2; // 庄家座位号 int32 seatId = 3; // 总共麻将牌数 int32 allPaiNum = 4; } 系统发牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 系统发牌 message PBAssignPai { // IResponse 10132 // 手牌,庄/闲家13张 repeated int32 paiList = 1[packed = false]; // 提示出牌, // 如果本字段为空,说明自已不能出牌 PBHintOut hint = 2; // 提示等待出牌 // 如果本字段为空,说明自已要出牌 PBWaitOut wait = 3; // 庄家风位牌墙起点到到骰子起点 // 即起点摸牌左边余下多少牌数 int32 leftPaiNum = 4; // 摸牌后右边余下多少牌数 int32 rightPaiNum = 5; // 同步牌数量 repeated PBSyncNum syncNumList = 6[packed = false]; // 庄家座位号 int32 zhuangSeat = 7; } 提示出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示出牌,发给可以出牌的玩家 message PBHintOut { // IResponse 10133 // 是否必须出牌(玩家必须选[出牌|碰|杠|胡]其中一个) bool isForce = 1; // 出牌token string token =2; // 是否能胡 bool canHu = 3; // 是否能杠 bool canGang = 4; // 是否能碰 bool canPeng = 5; // 是否能出牌 bool canOut = 6; // 系统是否派牌 bool hasAddPai = 7; // 系统派给玩家牌 int32 addPai = 8; // 风向光标指向座位号 int32 cursorSeatId = 9; // 手牌中有多张杠牌 repeated PBHintGang gangList = 10[packed = false]; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 int32 huMask = 11; // 碰的牌 int32 pengpai = 12; // 牌墙剩余数 int32 qiangNum = 13; // 客户端回放可能用到 int32 seatId = 14; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 15; // 胡牌的牌 int32 HuPai = 16; } 提示等待出牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 提示等待出牌,发给等待别人出牌的玩家 message PBWaitOut { // IResponse 10134 // 风向光标指向座位号 int32 cursorSeatId = 1; // 系统是否派牌 bool hasAddPai = 2; // 系统派给玩家座位号 int32 addPaiSeatId = 3; // 牌墙剩余数 int32 qiangNum = 4; // 是否继续等待,如果自已出过牌,但仍然后等待其他玩家操作,则此字段为true,否则为false bool isKeep = 5; } 请求出牌 syntax = \u0026#34;proto3\u0026#34;; package event; message PBAskOut { // IRequest 10135 // 出牌token string token=1; // 0-出牌(需要填充pai字段),1-碰,2-杠(需要填充pai字段,手牌可能有多杠),3-胡,4-过 // 5-取消杠胡(玩家主动/强制出牌,可杠可胡可出牌时,取消杠胡只要出牌) int32 action = 2; // 此次出的牌 int32 pai = 3; } 广播出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播出牌结果 message PBUseOut { // IResponse 10136 // 出牌玩家座位号 int32 seatId =1; // 出牌类型 // 0-出牌,1-碰,2-杠,3-胡,4-过(仅回放才有),5-取消杠/胡(仅回放才有) int32 outType = 2; // 出牌掩码 // 0-出牌 // 1-碰 // 20-暗杠,21-直杠(明杠),22-补杠(转角杠) // 41-自摸,42-抢杠胡,43-杠上花,44-点炮胡 // 40-过(仅回放才有) // 50-取消碰/杠/胡(仅回放才有) int32 outMask = 3; // 出/碰/杠的牌 int32 pai = 5[packed = false]; // 是否有被操作玩家,自模/暗杠等没有被操作玩家 bool hasWithSeatId = 6; // 被碰/杠/胡玩家的座位号 int32 withSeatId = 7; // 出牌类型为杠才有,出牌玩家的杠列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut gangList = 8[packed = false]; // 出牌类型为碰才有,出牌玩家的碰列表(从开局到现在,包括这次), 按发生顺序 repeated PBHistoryOut pengList = 9[packed = false]; // 只有出牌类型为杠才有, 杠完每个玩家的游戏币(精确到分), 按座位号顺序 repeated int64 totalCoins = 10[packed = false]; // 只有出牌类型为杠才有, 此次杠出牌, 每个玩家的得失分, 得分为正,失分为负, 按座位号顺序 repeated int32 oddScore = 11[packed = false]; // 只有出牌类型为胡才有, 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 12; // 只有出牌类型为胡才有,胡牌的牌 int32 HuPai = 13; } 广播多个出牌结果 syntax = \u0026#34;proto3\u0026#34;; package event; // 广播多个出牌结果,如果多个抢杠胡,则一起发 message PBMultiUseOut { // IResponse 10137 repeated PBUseOut outList = 1[packed = false]; } 摊牌 syntax = \u0026#34;proto3\u0026#34;; package event; // 摊牌 message PBTanPai { // IResponse 10138 repeated PBTanPaiItem items = 1[packed = false]; // 是否流局 bool isFlow = 2; } 小局结算 syntax = \u0026#34;proto3\u0026#34;; package event; // 小局结算 message PBSmallSettlement { // IResponse 10139 // 房间号 int32 id = 1; // 房间状态 0-未开始 1-小局结束 2-游戏中 3-已结束 int32 status = 2; // 当前局数 int32 now = 3; // 下局局数, 如果房间状态为：3， 这里为：0 int32 next = 4; // 总局数 int32 total = 5; // 玩法名称 string name = 6; // 玩法描述 string doc = 7; // 时间 string time = 8; // 房间底分 int32 baseScore = 9; // 结束原因, 0-玩家发起解散, 1-房间超过最低局数,有玩家退出, 2-房间达到最高局数 // 3-有玩家游戏币为负数 int32 overReason = 10; // 结束文字说明 string overDoc = 11; // 数据是否有效(奖马,胡牌,流局,放炮,各种分等) bool dataValid = 12; // 是否流局 bool isFlow = 13; // 奖马 repeated PBPrizeHorse prizeHorseList = 14 [packed = false]; // 各玩家的情况,座位号为下标 repeated PBSmallMeta players = 15 [packed = false]; } message PBSmallMeta { // 玩家ID int32 userId = 1; // 玩家昵称 string nickName = 2; // 当前总游戏币(精确到分) int64 totalCoins = 3; // 此局输赢分,赢分为正数,输分为负数 int32 winScore = 4; // 是否为庄家 bool isBanker = 5; // 是否胡牌 bool isHu = 6; // 最后胡的牌 int32 huPai = 7; // 胡牌类型,41-自摸,42-抢杠胡,43-杠上花,44-天胡,45-点炮胡,46-地胡 int32 huType = 8; // 是否放炮 bool isPao = 9; // 胡分,赢分为正数,输分为负数 int32 huScore = 10; // 杠分,赢分为正数,输分为负数 int32 gangScore = 11; // 跟庄分,赢分为正数,输分为负数 int32 followBankerScore = 12; // 中马分,赢分为正数,输分为负数 int32 prizeHorseScore = 13; // 手牌(如果胡牌/流局/解散,则不包括最后胡/派的牌) repeated int32 handPaiList = 14[packed = false]; // 玩家的杠列表, 按发生顺序 repeated PBHistoryOut gangList = 15[packed = false]; // 玩家的碰列表, 按发生顺序 repeated PBHistoryOut pengList = 16[packed = false]; // 胡牌番型,平胡,十三烂等 int32 HuTypeNum = 17; // 此局输赢游戏币数(精确到分),赢为正数,输为负数 int64 WinCoins = 18; // 是否有派牌(如果流局/解散,系统最后给玩家派牌) bool hasAddPai = 19; // 系统的派牌 int32 addPai = 20; } // 奖马 message PBPrizeHorse { // 麻将牌 int32 pai = 1; // 是否中奖 bool isPrize = 2; } 回放游戏信息 syntax = \u0026#34;proto3\u0026#34;; package event; // 回放游戏信息 message PBReplayGame { // IResponse 10140 // 系统发的手牌,按座位号为下标 repeated PBAssignPai assignPaiList = 1[packed = false]; } 回放 syntax = \u0026#34;proto3\u0026#34;; package event; //回放,客户端要求 message PBReplay { // IResponse 10155 repeated PBReplayCell cells = 1[packed = false]; } 创建VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventCreateVIPRoom { // IRequest 10159 } 加入VIP房间 syntax = \u0026#34;proto3\u0026#34;; package event; message EventJoinVIPRoom { // IRequest 10160 string pwd = 2; } "
},
{
	"uri": "/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE/",
	"title": "游戏协议",
	"tags": [],
	"description": "",
	"content": "记录每个游戏前端和后端通讯协议 "
}]